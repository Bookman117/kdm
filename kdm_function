#kdm environment pre-setting
function host-os-detection()
{
  cat /etc/os-release &> /dev/null
  [ ${?} == 0 ] && OS_VERSION=$(cat /etc/os-release | grep 'PRETTY_NAME' | cut -d '"' -f 2) || OS_VERSION=macOS
  echo ${OS_VERSION} | grep "Rocky" &> /dev/null && OS_VER="CentOS_8_Stream"
  echo ${OS_VERSION} | grep "Ubuntu" &> /dev/null && OS_VER="xUbuntu_22.04"
  echo ${OS_VERSION} | grep "Red Hat Enterprise Linux" &> /dev/null && OS_VER="RHEL_8"
  echo ${OS_VERSION} | grep "Alpine Linux" &> /dev/null && OS_VER="Alpine"
  echo ${OS_VERSION} | grep "macOS" &> /dev/null && OS_VER="macOS"
  #dnf lock os version
  #[ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "cat /etc/os-release | cut -d '"' -f 2 | sudo tee /etc/yum/vars/releasever"
}

function check-kdm-path()
{
  ls ~/bin &> /dev/null
  [ ${?} != 0 ] && mkdir ~/bin
  ls ~/kdm/kdm &> /dev/null
  [ ${?} == 0 ] && mv ~/kdm/kdm ~/bin/
  ls ~/kdm/kdm_function &> /dev/null
  [ ${?} == 0 ] && mv ~/kdm/kdm_function ~/bin/
  ls yaml &> /dev/null
  [ ${?} != 0 ] && mkdir yaml
}

function setup-network-package()
{
  # Setup basic network package
  host-os-detection
  install=1
  [ "${OS_VER}" == "CentOS_8_Stream" ] && which wget &> /dev/null && install=0
  [ "${OS_VER}" == "RHEL_8" ] && OS_VER="CentOS_8_Stream" && which wget &> /dev/null && install=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${install}" == "1" ] && sudo dnf update -y && sudo dnf install -y --allowerasing dnf-command\(versionlock\) jq net-tools dnsutils nc wget && clear
  [ "${OS_VER}" == "xUbuntu_22.04" ] && install=2
  [ "${OS_VER}" == "xUbuntu_22.04" ] && which route &> /dev/null && install=0
  [ "${install}" == "2" ] && sudo apt update -qy && sudo apt install -qy net-tools iputils-ping dnsutils netcat && clear
  #[ "${OS_VER}" == "macOS" ] &&
  host-os-detection  
}

function setup-password-control()
{
  # Service user password setting
  ECK_PASSWORD='$2a$10$1VHwrNCr637Ya3BJF44ZuejWLTd2nqbl25We.8fOddHSLBCukT31K' #Code as ??
  MARIADB_GALERA_USER="bigred"
  MARIADB_GALERA_PASSWORD='VkB0dGVuMiEK' #Code as base64
}

function set-text-color-variable()
{
  #Text color setting
  NC="\033[0m" #Color reset
  BLACK="\033[0;30m"
  RED="\033[0;31m"
  GREEN="\033[0;32m"
  YELLOW="\033[0;33m"
  BLUE="\033[0;34m"
  PURPLE="\033[0;35m"
  CYAN="\033[0;36m"
  WHITE="\033[0;37m"
}

function set-network-variable()
{
  #Network info
  IP=$(ip a | grep -E 'en|eth' | grep 'inet' | awk '{ print $2 }' | cut -d '/' -f 1 | head -n 1)
  NETID=$(ip a | grep 'en' | grep 'inet' | awk '{ print $2 }' | cut -d '.' -f 1-3 | head -n 1)
  [ "${OS_VER}" != "macOS" ] && GATEWAY=$(route -n | tr -s " " | grep '^0.0.0.0' | cut -d " " -f 2 | grep "${NETID}")
  [ "${OS_VER}" != "macOS" ] && NETMASK=$(route -n | grep 'en' | grep -w 'U' | awk '{ print $3 }')
  [ "${OS_VER}" == "macOS" ] && GATEWAY=$(netstat -nr | grep '^default' | grep "en[0-9]" | awk '{ print $2 }')
  [ "${OS_VER}" == "macOS" ] && NETMASK="??"

  #Kube-VIP
  VIP_TARGET=$(($(cat /etc/hosts | grep "${NETID}" | grep '\-m1' | awk '{ print $1 }' | cut -d '.' -f 4)-1))
  KUBE_VIP="${NETID}.${VIP_TARGET}"
  KUBE_INTERFACE=$(ip a | grep -B 3 "${IP}" | grep 'ens' | head -n 1 | awk '{ print $2 }' | sed 's/://g')
  echo "${OS_VERSION}" | grep 'Rocky Linux 8' &> /dev/null
  [ ${?} == 0 ] && NETWORK_UUID=$(cat /etc/sysconfig/network-scripts/ifcfg-${KUBE_INTERFACE} | grep 'UUID' | cut -d '=' -f 2)
}

function set-environment-variable() 
{
  source ~/bin/kdm_function &> /dev/null
  export KUBE_EDITOR=nano
  LOG_OUTPUT_LEVEL="" #--v=5
  #Package list
  PACKAGE_LIST="cri-o kubelet kubeadm kubectl helm podman"
  #Linux security settings
  SELINUX_MODE=enforcing #disable | permissive | enforcing
  FIREWALLD_ENABLE=disable #disable | enable
  #Linux package version control
  VER_CONTROL=sub
  CRIO_RELEASE=1.27
  CRIO_SUBVER=${CRIO_RELEASE}.0
  KUBE_RELEASE=1.27
  KUBE_SUBVER=${KUBE_RELEASE}.0
  KUBE_INIT_VER=v${KUBE_SUBVER}
  KUBE_REGISTRY=registry.k8s.io #registry.vattenlab.com
  HELM_VER=$(sudo apt-cache madison helm | head -n 1 | awk '{ print $3 }')
  PODMAN_VER=$(sudo apt-cache madison podman | head -n 1 | awk '{ print $3 }')
  SKOPEO_VER=$(sudo apt-cache madison skopeo | head -n 1 | awk '{ print $3 }')
  K8S_GPG_PATH=/etc/apt/trusted.gpg.d/ #/usr/share/keyrings/ | /etc/apt/keyrings/
  GPG_PATH=/etc/apt/trusted.gpg.d/ #/usr/share/keyrings/ | /etc/apt/keyrings/
  POD_CIDR=172.16.0.0/17
  SVC_CIDR=172.16.128.0/17
  #Context setup
  CLUSTER_USER=bigred
  CLUSTER_NAME=UB22-T1
  #Kubernetes CNI
  KUBE_VIP_VER=v0.6.2
  CALICO_VER=v3.26.1 #（v3.26.0 會無法部署 rook-ceph）
  FLANNEL_VER=v0.22.2
  CORE_DNS_DOMAIN=cluster.local #vattensoft.lab.com
  CNI_SOCK="/var/run/crio/crio.sock"
  #Kubernetes CSI
  ROOK_TAG=v1.12.2
  ROOK_GIT_RELEASE='release-1.12'
  STORAGE_CLASS="local-path" #rook-ceph-block | local-path
  CEPH_DASHBOARD_URL="ceph.${CORE_DNS_DOMAIN}"
  LOCAL_PATH_VER=v0.0.24
  #Kubernetes Monitoring
  METRICS_VER=3.11.0
  PROMETHEUSE_VER=47.0.0
  #Kubernetes service
  METALLB_RELEASE=v0.13
  METALLB_VER=$(curl -s https://github.com/metallb/metallb/releases.atom | grep "/releases/tag/${METALLB_RELEASE}" | cut -d '"' -f 6 | head -n 1 | cut -d '/' -f 8)
  METALLB_POOL_NAME=metal-1
  INGRESS_NGINX_VER=1.8.0
  INGRESS_NGINX_HELM_VER=4.7.0
  INGRESS_CLASS_NAME=ingress-1
  ECK_OP_VER=2.7.0
  ECK_VER=8.7.0
  #Docker
  HARBOR_VER=v2.8.0
  DOCKER_COMPOSE_VER=2.17.3
}

function kubernetes-node-variable()
{
  #node & service
  CP_NODES=$(cat /etc/hosts | grep -vE '#|ip6' | grep "${NETID}" | awk '{ print $2 }' | grep "\-m" | tr -s '\n' ' ')
  WK_NODES=$(cat /etc/hosts | grep -vE '#|ip6' | grep "${NETID}" | awk '{ print $2 }' | grep "\-w" | tr -s '\n' ' ')
  ALL_NODES=$(cat /etc/hosts | grep -vE '#|ip6' | grep "${NETID}" | awk '{ print $2 }' | grep -E "\-m|\-w" | tr -s '\n' ' ')
  ALL_NODES_EX_LOCALHOST=$(cat /etc/hosts | grep -vE '#|ip6' | grep "${NETID}" | awk '{ print $2 }' | grep -E "\-m|\-w" | grep -v `hostname` | tr -s '\n' ' ')
}

function kubernetes-namespace-variable()
{
  #Kubernetes projects namespace
  KUBE_SYSTEM_NS="kube-system"
  LOCAL_PATH_NS="local-path-storage"
  MATELLB_NS="metallb-system"
  INGRESS_NGINX_NS="ingress-nginx"
  JENKINS_NS="jenkins"
  QUAY_NS="quay"
  GRAFANA_NS="grafana" #gf
  LANDLORD_NS="landlord"
  ROOK_CEPH_NS="rook-ceph"
  MARIADB_GALERA_NS="mariadb-galera"
}

function setup-pkg-version()
{
  set-environment-variable
  [ -z ${2} ] && echo -e "${RED}Please input parameter after ${YELLOW}\"set-ver\" [ latest | sub ]${NC}\n" && exit
  echo "${2}" | grep -vE 'latest|sub' &> /dev/null
  [ ${?} == 0 ] && echo -e "${RED}Please input parameter after ${YELLOW}\"set-ver\" [ latest | sub ]${NC}\n" && exit

  [ -z ${3} ] && [ "${2}" == "latest" ] && echo -e "${RED}Please input parameter after ${YELLOW}\"set-ver ${2}\" [0-9.0-99]${NC}\n" && exit
  [ -z ${3} ] && [ "${2}" == "sub" ] && echo -e "${RED}Please input parameter after ${YELLOW}\"set-ver ${2}\" [0-9.0-99.0-9]${NC}\n" && exit

  status=0
  [ "${2}" == "sub" ] && echo "${3}" | sed 's|^[0-9].[0-9][0-9].[0-9]||g' | grep '^$' &> /dev/null && status=1
  [ "${2}" == "sub" ] && [ "${status}" == "0" ] && echo -e "${RED}Please input parameter after ${YELLOW}\"set-ver ${2}\" [0-9.0-99.0-9]${NC}\n" && exit

  [ "${2}" == "latest" ] && echo "${3}" | sed 's|^[0-9].[0-9][0-9]||g' | grep '^$' &> /dev/null && status=1
  [ "${2}" == "latest" ] && [ "${status}" == "0" ] && echo -e "${RED}Please input parameter after ${YELLOW}\"set-ver ${2}\" [0-9.0-99]${NC}\n" && exit

  v1=$(echo ${3} | cut -d '.' -f 1-2)
  v2=$(echo ${3} | cut -d '.' -f 3)
  echo ${3} | cut -d '.' -f 3 | grep [0-9] &> /dev/null
  [ ${?} != 0 ] && v2=0

  sed -i "s|CRIO_RELEASE=${CRIO_RELEASE}|CRIO_RELEASE=${v1}|g" ~/bin/kdm_function
  sed -i "s|CRIO_SUBVER=\${CRIO_RELEASE}.*|CRIO_SUBVER=\${CRIO_RELEASE}.${v2}|g" ~/bin/kdm_function
  sed -i "s|KUBE_RELEASE=${KUBE_RELEASE}|KUBE_RELEASE=${v1}|g" ~/bin/kdm_function
  sed -i "s|KUBE_SUBVER=\${KUBE_RELEASE}.*|KUBE_SUBVER=\${KUBE_RELEASE}.${v2}|g" ~/bin/kdm_function
  sed -i "s|^VER_CONTROL=[a-z]*|VER_CONTROL=${2}|g" ~/bin/kdm_function
  cat ~/bin/kdm_function | grep -E "${v1}|${2}" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Version setting is completed"
}

function start-info()
{
  # Kubernetes basic info
  which kubectl &> /dev/null
  [ ${?} == 0 ] && KUBE_AGE=$(kubectl get nodes 2> /dev/null | grep `hostname` | awk '{ print $4 }')
  for install_list in ${CP_NODES} ${WK_NODES}
    do
      nc -z -w 1 ${install_list} 10250 > /dev/null 2>&1
      [ ${?} == 0 ] && status=1 || status=0
      [ "${status}" == "1" ] && cluster_list=$(ssh ${install_list} kubectl get nodes 2> /dev/null | tail -n +2 | cut -d " " -f 1 | tr -s '\n' ' ') && cluster_ver=$(ssh ${install_list} kubectl get nodes 2> /dev/null | grep '\-m' | awk '{ print $5}' | head -n 1) && break
      [ "${status}" == "0" ] && continue
    done
  nc -z -w 1 `hostname` 10250 > /dev/null 2>&1
  #[ ${?} != 0 ] && meassage="       | ${RED}This node not activate.${NC}"
  [ ${?} != 0 ] && meassage="\t| ${RED}This node not activate.${NC}" && cluster_ver="--" && KUBE_AGE="--"
  if [ "${status}" == "1" ]
    then
      echo -e "${GREEN}●${NC} Kubernetes deployed\t| ${cluster_ver} | `hostname` node age: ${GREEN}${KUBE_AGE}${NC}"
      #show nodes info
      echo -e "  ├─ Active nodes${meassage}"
      echo ${cluster_list} | grep '\-m' &> /dev/null
      [ ${?} == 0 ] && echo -e "  │  ├─ control-plane\t| ${GREEN}`echo ${cluster_list} | tr -s ' ' '\n' | grep '\-m' | tr -s '\n' ' '`${NC}" || echo -e "  │  ├─ control-plane\t| --"
      echo ${cluster_list} | grep '\-w' &> /dev/null
      [ ${?} == 0 ] && echo -e "  │  └─ worker\t\t| ${GREEN}`echo ${cluster_list} | tr -s ' ' '\n' | grep '\-w' | tr -s '\n' ' '`${NC}" || echo -e "  │  └─ worker\t\t| --"
      #show storageclass info
      storageclass_quantity=$(kubectl get storageclass -A 2> /dev/null | tail -n +2 | wc -l)
      storageclass_list=$(kubectl get storageclass -A 2> /dev/null | tail -n +2 | awk '{ print $1 }' | tr -s '\n' ' ' | sed 's/.$//')
      echo "${storageclass_quantity}" | grep '^0' &> /dev/null
      [ ${?} == 0 ] && echo -e "  ├─ StorageClass\t| ${YELLOW}Not deploy"${NC} || \
      for list in ${storageclass_list}
        do
          echo -e "  ├─ StorageClass\t| ${GREEN}deployed: ${list}${NC}"
        done
      #show controller info
      kubectl get pods -n metallb-system 2> /dev/null  | tail -n +2 | awk '{ print $2,$3 }' | grep '1/1 Running' &> /dev/null
      [ ${?} == 0 ] && echo -e "  ├─ Controller\t\t| ${GREEN}deployed: metallb${NC}" || echo -e "  ├─ Controller\t\t| ${YELLOW}Not deploy: metallb${NC}"
      kubectl get pods -n ingress-nginx 2> /dev/null  | grep 'ingress-nginx-controller*' | awk '{ print $2,$3 }' | grep '1/1 Running' &> /dev/null
      [ ${?} == 0 ] && echo -e "  ├─ Controller\t\t| ${GREEN}deployed: ingress-nginx${NC}" || echo -e "  ├─ Controller\t\t| ${YELLOW}Not deploy: ingress-nginx${NC}"
      #show monitoring info
      #kubectl get pods -A | grep 'metrics' &> /dev/null
      kubectl get pods -n kube-system 2> /dev/null  | grep '^metrics' | awk '{ print $2,$3 }' | grep '1/1 Running' &> /dev/null
      [ ${?} == 0 ] && echo -e "  ├─ Monitoring\t\t| ${GREEN}deployed: metrics${NC}" || echo -e "  ├─ Monitoring\t\t| ${YELLOW}Not deploy: metrics${NC}"
      #kubectl get pods -A | grep 'prometheus' &> /dev/null
      kubectl get pods -n monitoring 2> /dev/null | grep 'kube-prometheus' | awk '{ print $2,$3 }' | grep -E '1/1 Running|2/2 Running|3/3 Running' &> /dev/null
      [ ${?} == 0 ] && echo -e "  └─ Monitoring\t\t| ${GREEN}deployed: prometheus${NC}" || echo -e "  └─ Monitoring\t\t| ${YELLOW}Not deploy: prometheus${NC}"
      #echo -e "${YELLOW}\nInput parameter \"help\" display more information.${NC}"
    else
      echo -e "${YELLOW}●${NC} Kubernetes not detected"
      echo -e "  └─ Nodes plan list"
      echo -e "     ├─ control-plane\t| ${YELLOW}`echo -e "${CP_NODES}"`${NC}"
      echo -e "     └─ worker nodes\t| ${YELLOW}`echo ${WK_NODES}`${NC}"
      #echo -e "${YELLOW}\nInput parameter \"help\" display more information.${NC}"
  fi
}

function crio-available-version-check()
{
  #source ~/bin/kdm &> /dev/null
  set-environment-variable
  count=0
  cat /dev/null > /tmp/CRIO_ALL_VERSION
  while [ ${count} -le 9 ]
    do
      list="${CRIO_RELEASE}.${count}"
      echo -n "${list} " >> /tmp/CRIO_ALL_VERSION
      count=$((${count}+1))
    done
  echo "${VER_CONTROL}" | grep "latest"  &> /dev/null
  [ ${?} == 0 ] && CRIO_ALL_VERSION=${CRIO_SUBVER} || CRIO_ALL_VERSION=`cat /tmp/CRIO_ALL_VERSION | sed /\n/d`
  
  cat /dev/null > /tmp/CRIO_AVL_VER
  for list in ${CRIO_ALL_VERSION}
    do
      curl -s https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${CRIO_RELEASE}:/${list}/${OS_VER}/Release.key | grep 'BEGIN PGP PUBLIC KEY BLOCK' &> /dev/null
      [ ${?} == 0 ] && echo -n "${list} " >> /tmp/CRIO_AVL_VER && echo -e " [${GREEN}●${NC}] cri-o version: ${list} is available"
    done
  CRIO_AVL_VER=`cat /tmp/CRIO_AVL_VER 2> /dev/null | sed /\n/d`
}

function show-version-control()
{
  source ~/bin/kdm &> /dev/null && set-environment-variable
  CRIO_AVL_VER=`cat /tmp/CRIO_AVL_VER 2> /dev/null | sed /\n/d`
  echo "${CRIO_AVL_VER}" | grep -v [0-9] &> /dev/null
  [ ${?} == 0 ] && CRIO_AVL_VER="Unconfirmed [Configure with set-var parameter]"
  echo -e "${YELLOW}Variable list${NC}"
  echo -e " > VER_CONTROL     \t | ${YELLOW}${VER_CONTROL}${NC}"
  echo -e " > OS_VERSION      \t | ${YELLOW}${OS_VERSION}${NC}"
  echo -e " > OS_VER          \t | ${YELLOW}${OS_VER}${NC}"
  echo -e " > CRIO_AVL_VER    \t | ${YELLOW}${CRIO_AVL_VER}${NC}"
  echo -e " > CRIO_RELEASE    \t | ${YELLOW}${CRIO_RELEASE}${NC}"
  echo -e " > CRIO_SUBVER     \t | ${YELLOW}${CRIO_SUBVER}${NC}"
  echo -e " > HELM_VER        \t | ${YELLOW}${HELM_VER}${NC}"
  echo -e " > PODMAN_VER      \t | ${YELLOW}${PODMAN_VER}${NC}"
  echo -e " > KUBE_RELEASE    \t | ${YELLOW}${KUBE_RELEASE}${NC}"
  echo -e " > KUBE_SUBVER     \t | ${YELLOW}${KUBE_SUBVER}${NC}"
  echo -e " > KUBE_VIP        \t | ${YELLOW}${KUBE_VIP}${NC}"
  echo -e " > KUBE_INTERFACE  \t | ${YELLOW}${KUBE_INTERFACE}${NC}"
  echo -e " > POD_CIDR        \t | ${YELLOW}${POD_CIDR}${NC}"
  echo -e " > SVC_CIDR        \t | ${YELLOW}${SVC_CIDR}${NC}"
  echo "====="
  echo -e " > CORE_DNS_DOMAIN \t | ${YELLOW}${CORE_DNS_DOMAIN}${NC}"
  echo -e " > CLUSTER_USER    \t | ${YELLOW}${CLUSTER_USER}${NC}"
  echo -e " > CLUSTER_NAME    \t | ${YELLOW}${CLUSTER_NAME}${NC}"
  echo -e " > KUBE_INIT_VER   \t | ${YELLOW}${KUBE_INIT_VER}${NC}"
  echo -e " > LOCAL_PATH_VER  \t | ${YELLOW}${LOCAL_PATH_VER}${NC}"
  echo -e " > METRICS_VER     \t | ${YELLOW}${METRICS_VER}${NC}"
  echo -e " > PROMETHEUSE_VER \t | ${YELLOW}${PROMETHEUSE_VER}${NC}"
  echo -e " > CALICO_VER      \t | ${YELLOW}${CALICO_VER}${NC}"
  echo -e " > ROOK_GIT_RELEASE\t | ${YELLOW}${ROOK_GIT_RELEASE}${NC}"
  echo -e " > ROOK_TAG        \t | ${YELLOW}${ROOK_TAG}${NC}"
  echo -e " > ECK_OP_VER      \t | ${YELLOW}${ECK_OP_VER}${NC}"
  echo -e " > ECK_VER         \t | ${YELLOW}${ECK_VER}${NC}"
  echo -e " > STORAGE_CLASS   \t | ${YELLOW}${STORAGE_CLASS}${NC}"
  echo "====="
  echo -e " > SELINUX_MODE    \t | ${YELLOW}${SELINUX_MODE}${NC}"
  echo -e " > IP              \t | ${YELLOW}${IP}${NC}"
  echo -e " > NETID           \t | ${YELLOW}${NETID}${NC}"
  echo -e " > GATEWAY         \t | ${YELLOW}${GATEWAY}${NC}"
  echo -e " > NETMASK         \t | ${YELLOW}${NETMASK}${NC}"
  echo -e " > CP_NODES        \t | ${YELLOW}${CP_NODES}${NC}"
  echo -e " > WK_NODES        \t | ${YELLOW}${WK_NODES}${NC}"
}

function system-check()
{
  [ -z ${2} ] && node-message ${@} && exit
  #[ -z ${2} ] && node-selector hosts
  node-selector ${@}

  for install_list in ${cp_nodes} ${wk_nodes}
    do
      echo -e "${YELLOW}${install_list} | System status${NC}"
      nc -z -w 1 ${install_list} 22 > /dev/null 2>&1
      [ ${?} != 0 ] && echo -e " [${RED}●${NC}] ${install_list} This node not available\n" && continue
      #modules
      sys_modules=$(ssh ${install_list} lsmod | awk '{ print $1 }' | grep -E 'br_netfilter|overlay' | sed ":a;N;s/\n/ | /g")
      echo -e " [${GREEN}●${NC}] modules:\t\t${sys_modules}"
      #SELinux
      status=0
      [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo sestatus | grep 'SELinux status:' | grep 'disabled'" &> /dev/null && echo -e " [${GREEN}●${NC}] SELinux\t\tdisabled" && status=1
      [ "${status}" == "0" ] && [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo sestatus | grep 'SELinux status:' | grep 'enabled'" &> /dev/null && se_status=$(ssh ${install_list} sudo sestatus | grep 'Current mode:' | awk '{ print $3 }') && echo -e " [${YELLOW}●${NC}] SELinux:\t\t${se_status}"
      [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo sestatus | grep 'SELinux status:' | grep 'disabled'" &> /dev/null && echo -e " [${GREEN}●${NC}] SELinux disabled"
      [ "${status}" == "0" ] && [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo sestatus | grep 'SELinux status:' | grep 'enabled'" &> /dev/null && se_status=$(ssh ${install_list} sudo sestatus | grep 'Current mode:' | awk '{ print $3 }') && echo -e " [${YELLOW}●${NC}] SELinux:\t\t${se_status}"
      #firewalld
      [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo systemctl status firewalld | grep 'active (running)'" &> /dev/null && echo -e " [${YELLOW}●${NC}] firewalld:\t\tnot disable"
      [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo systemctl status firewalld | grep 'inactive (dead)'" &> /dev/null && echo -e " [${GREEN}●${NC}] firewalld:\t\tdisabled"
      [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo systemctl status firewalld | grep 'active (running)'" &> /dev/null && echo -e " [${YELLOW}●${NC}] firewalld:\t\tnot disable"
      [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo systemctl status firewalld | grep 'inactive (dead)'" &> /dev/null && echo -e " [${GREEN}●${NC}] firewalld:\t\tdisabled"
      #swap
      ssh ${install_list} "sudo swapon --show | grep '/dev'" &> /dev/null
      [ ${?} != 0 ] && echo -e " [${GREEN}●${NC}] swap:\t\tdisabled" || echo -e " [${RED}●${NC}] swap\t\tnot disable"
      #ipv4 forward
      forward=$(ssh ${install_list} "cat /proc/sys/net/bridge/bridge-nf-call-iptables 2> /dev/null")
      [ "${forward}" == "1" ] && echo -e " [${GREEN}●${NC}] ipv4_forward:\tenabled" || echo -e " [${YELLOW}●${NC}] ipv4 ip_forward\tnot enable."
      echo
    done
}

function system-info()
{
  if [ "${OS_VERSION}" == "macOS" ]
    then
      #Variable
      GATEWAY=$(netstat -nr | grep '^default' | grep "en1" | awk '{ print $2 }')
      IP=$(Ipconfig getifaddr en1)
      NETID=${IP%.*}

      #Program
      #system information
      echo "[System]" | sudo tee /tmp/sinfo

      os_name=$(echo $(sw_vers | tr -s " " "-" | awk '{ print $2 }' | sed 's/Mac-OS-X/macOS X/g'))
      echo " OS Version: $os_name" | sudo tee -a /tmp/sinfo
      echo " Hostname: `hostname`" | sudo tee -a /tmp/sinfo

      m_size=$(($(sysctl hw.memsize | awk '{ print $2 }')/1073741824))
      echo " Memory: ${m_size}G" | sudo tee -a /tmp/sinfo

      cpu_name=$(sysctl -a | grep brand_string | tr -s ' ' '-' | cut -d '-' -f 2-8 | tr -s '-' ' ' | sed 's/(R)//g; s/(TM)//g')
      cpu_number=$(sysctl -a | grep core_count | awk '{ print $2 }')
      echo " CPU: $cpu_name (core: $cpu_number)" | sudo tee -a /tmp/sinfo

      d=$(sudo df -h | grep -w '/' | awk '{ print $2 }' | sed 's/i//g')
      echo " Disk: $d" | sudo tee -a /tmp/sinfo
      echo "" | sudo tee -a /tmp/sinfo

      #network information
      echo "[Network]" | sudo tee -a /tmp/sinfo
      echo " IP: $IP" | sudo tee -a /tmp/sinfo
      echo " Gateway: $GATEWAY" | sudo tee -a /tmp/sinfo
      for list in $(cat /etc/resolv.conf | grep '^nameserver' | awk '{ print $2 }')
        do
          echo " nameserver: ${list}" | sudo tee -a /tmp/sinfo
        done

      ping -c 1 www.hinet.net >> /dev/null
      [ "${?}" == "0" ] && echo -e " Internet access: ${GREEN}Granted${NC}" || echo -e " Internet: ${RED}Denied{NC}" | sudo tee -a /tmp/sinfo
    else
      #system information
      #echo "" | sudo tee /tmp/sinfo &> /dev/null
      echo -e "[System]"
      #OS information
      os_name=`cat /etc/os-release | grep 'PRETTY_NAME' | cut -d '"' -f 2`
      echo -e " OS Version: ${YELLOW}$os_name${NC}"
      echo -e " Hostname: ${YELLOW}`hostname`${NC}"
      #cpu information
      cpu_name=$(sudo cat /proc/cpuinfo | grep 'model name' | head -n 1 | cut -d ':' -f2 | tr -s '-' ' ' | sed 's/(R)//g; s/(TM)//g; s/@ //g' | sed 's/^.//')
      core_number=$(sudo cat /proc/cpuinfo | grep 'model name' | wc -l)
      cpu_architecture=$(uname -m)
      echo -e " CPU: ${YELLOW}$cpu_name (core: $core_number) | ${cpu_architecture}${NC}"
      #memory information
      sudo free -mh | grep Mem: | awk '{ print $2 }' | grep 'Gi' &> /dev/null
      [ ${?} == 0 ] && byte=GB || byte=MB
      m_size=$(sudo free -mh | grep Mem: | awk '{ print $2 }' | sed 's/Gi//g')
      Gi_to_GB=$(awk "BEGIN { print $m_size / .93 }")
      echo -e " Memory: ${YELLOW}${Gi_to_GB} ${byte}${NC}"
      #disk information
      disk_list=$(sudo fdisk -l | grep '^Disk' | grep 'sd' | grep 'bytes' | awk '{ print $2 }' | sed 's/://g;s/\/dev\///g' | tr -s '\n' ' ' | sed 's/.$//')
      echo -e " Disk list: ${YELLOW}${disk_list}${NC}"
      #for disk_list in ${disk_list}
      #  do
      #    sudo fdisk -l | grep '^Disk' | grep 'bytes' | grep "${disk_list}" | grep -E 'GB|GiB' &> /dev/null
      #    [ ${?} == 0 ] && byte=GB || byte=MB
      #    disk_capacity=$(sudo fdisk -l | grep '^Disk' | grep 'bytes' | grep "${disk_list}" | awk '{ print $3 }')
      #    disk_usage=$(sudo du -ch / 2> /dev/null | grep 'total' | awk '{ print $1 }' | tr -s 'GM' ' ')
      #    sudo du -ch / 2> /dev/null | grep 'total' | awk '{ print $1 }' | grep 'G' &> /dev/null
      #    [ ${?} == 0 ] && disk_usage=$(sudo du -ch / 2> /dev/null | grep 'total' | awk '{ print $1 }' | tr -s 'GM' ' ') || disk_usage=$(awk "BEGIN { print $disk_usage / 1024 }")
      #
      #    disk_percent=$(awk "BEGIN { pc=100*${disk_usage}/${disk_capacity}; i=int(pc); print (pc-i<0.5)?i:i+1 }")
      #    disk_type=$(sudo fdisk -l | grep -A 1 "^Disk /dev/${disk_list}:" | grep '^Disk model' | cut -d ':' -f 2 | sed 's/^.//')
      #
      #    echo -e "  > Disk name: ${YELLOW}${disk_list} | ${disk_type}${NC}"
      #    echo -e "  > Disk capacity: ${YELLOW}${disk_capacity} ${byte}${NC}"
      #    echo -e "  > Disk usage: ${YELLOW}${disk_usage} ${byte} | ${disk_percent} %${NC}"
      #    echo "  ---"
      #  done
      #echo ""
      #network information
      echo "[Network]"
      echo -e " IP Address: ${YELLOW}${IP}${NC}"
      echo -e " Gateway: ${YELLOW}${GATEWAY}${NC}"

      for list in $(cat /etc/resolv.conf | grep '^nameserver' | awk '{ print $2 }')
        do
          echo -e " nameserver: ${YELLOW}${list}${NC}"
        done

      ping -c 1 www.hinet.net >> /dev/null
      [ "${?}" == "0" ] && echo -e " Internet access: ${GREEN}Granted${NC}" || echo -e " Internet: ${RED}Denied${NC}"
  fi
}

function system-swapoff()
{
  #swapoff
  ssh ${install_list} "sudo swapoff -a" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && swap=1 && swap_list=$(echo ${install_list} | cut -d '-' -f 2-3 | sed 's|-|--|g')
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "cat /etc/fstab | grep "/dev/mapper/rhel_rhel8--${swap_list}-swap"" &> /dev/null && swap=0
  [ "${OS_VER}" == "RHEL_8" ] && echo ${swap} | grep '1' &> /dev/null && ssh ${install_list} "sudo sed -i '/swap/d' /etc/fstab"

  [ "${OS_VER}" == "CentOS_8_Stream" ] && swap=1
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "cat /etc/fstab | grep '#/dev/mapper/rl-swap'" &> /dev/null && swap=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && echo ${swap} | grep '1' &> /dev/null && ssh ${install_list} "sudo sed -i 's|/dev/mapper/rl-swap|#/dev/mapper/rl-swap|g' /etc/fstab"
  
  [ "${OS_VER}" == "xUbuntu_22.04" ] && swap=1
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "ls -al /swap.img" &> /dev/null && ssh ${install_list} "sudo rm /swap.img" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "cat /etc/fstab | grep '#/swap.img'" &> /dev/null && swap=0
  [ "${OS_VER}" == "xUbuntu_22.04" ] && echo ${swap} | grep '1' &> /dev/null && ssh ${install_list} "sudo sed -i 's|/swap.img|#/swap.img|g' /etc/fstab" &> /dev/null
  
  ssh ${install_list} "sudo swapon --show | grep '/dev'" &> /dev/null
  [ ${?} != 0 ] && echo -e " [${GREEN}●${NC}] System\t| swap disabled" || echo -e " [${RED}●${NC}] System\t| swap not disable"
}

function system-selinux()
{
  #SELinux setting
  status=0
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo setenforce 0" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo sed -i "/^SELINUX=/c\SELINUX=${SELINUX_MODE}" /etc/selinux/config"
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo nmcli connection modify ${KUBE_INTERFACE} ipv6.method ignore"
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo sestatus | grep 'SELinux status:' | grep 'disabled'" &> /dev/null && echo -e " [${GREEN}●${NC}] System\t| SELinux disabled" && status=1
  [ "${status}" == "0" ] && [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo sestatus | grep 'SELinux status:' | grep 'enabled'" &> /dev/null && se_status=$(ssh ${install_list} sudo sestatus | grep 'Current mode:' | awk '{ print $3 }') && echo -e " [${YELLOW}●${NC}] System\t| SELinux mode: ${YELLOW}${se_status}${NC}"

  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo setenforce 0" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo sed -i "/^SELINUX=/c\SELINUX=${SELINUX_MODE}" /etc/selinux/config"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo nmcli connection modify ${KUBE_INTERFACE} ipv6.method ignore"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo sestatus | grep 'SELinux status:' | grep 'disabled'" &> /dev/null && echo -e " [${GREEN}●${NC}] System\t| SELinux disabled"
  [ "${status}" == "0" ] && [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo sestatus | grep 'SELinux status:' | grep 'enabled'" &> /dev/null && se_status=$(ssh ${install_list} sudo sestatus | grep 'Current mode:' | awk '{ print $3 }') && echo -e " [${YELLOW}●${NC}] System\t| SELinux mode: ${YELLOW}${se_status}${NC}"
}

function system-firewalld()
{
  #firewalld setup
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} 'sudo systemctl status firewalld | grep "active (running)"' &> /dev/null && status=1
  [ "${OS_VER}" == "RHEL_8" ] && echo ${status} | grep '1' &>/dev/null && ssh ${install_list} "sudo systemctl ${FIREWALLD_ENABLE} firewalld --now" &> /dev/null && echo -e " [${GREEN}●${NC}] System\t| firewalld disabled [ need reboot ]"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} 'sudo systemctl status firewalld | grep "active (running)"' &> /dev/null && status=1
  [ "${OS_VER}" == "CentOS_8_Stream" ] && echo ${status} | grep '1' &>/dev/null && ssh ${install_list} "sudo systemctl ${FIREWALLD_ENABLE} firewalld --now" &> /dev/null && echo -e " [${GREEN}●${NC}] System\t| firewalld disabled [ need reboot ]"
  #[ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} 'sudo systemctl status firewalld | grep "inactive (dead)"' &> /dev/null &&  echo -e " [${YELLOW}●${NC}] firewalld not disable"
  #firewalld setup（enable）
  #[ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo dnf install -y iproute-tc &> /dev/null"
  # kubelet API | kube-scheduler | kube-controller-manager | NodePort Services | apply changes
  #[ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo firewall-cmd --permanent --add-port=6443/tcp &> /dev/null"
  #[ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo firewall-cmd --permanent --add-port=2379-2380/tcp &> /dev/null"
  #[ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo firewall-cmd --permanent --add-port=10250/tcp &> /dev/null"
  #[ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo firewall-cmd --permanent --add-port=10251/tcp &> /dev/null"
  #[ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo firewall-cmd --permanent --add-port=10252/tcp &> /dev/null"
  #[ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo firewall-cmd --reload &> /dev/null"
}

function system-modules()
{
  #modules setup
  modules=1
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo modprobe br_netfilter" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo modprobe overlay" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "cat /etc/modules-load.d/crio.conf | grep -E 'overlay|br_netfilter'" &> /dev/null && modules=0
  [ "${OS_VER}" == "RHEL_8" ] && echo "${modules}" | grep '1' &> /dev/null && ssh ${install_list} "echo "overlay" | sudo tee -a /etc/modules-load.d/crio.conf" &> /dev/null && ssh ${install_list} "echo "br_netfilter" | sudo tee -a /etc/modules-load.d/crio.conf" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "cat /etc/modules-load.d/crio.conf | grep -E 'overlay|br_netfilter'" &> /dev/null && echo -e " [${GREEN}●${NC}] System\t| modules ${YELLOW}br_netfilter | overlay${NC} enabled"

  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo modprobe br_netfilter" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo modprobe overlay" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "cat /etc/modules-load.d/crio.conf | grep -E 'overlay|br_netfilter'" &> /dev/null && modules=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && echo "${modules}" | grep '1' &> /dev/null && ssh ${install_list} "echo "overlay" | sudo tee -a /etc/modules-load.d/crio.conf" &> /dev/null && ssh ${install_list} "echo "br_netfilter" | sudo tee -a /etc/modules-load.d/crio.conf" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "cat /etc/modules-load.d/crio.conf | grep -E 'overlay|br_netfilter'" &> /dev/null && echo -e " [${GREEN}●${NC}] System\t| modules ${YELLOW}br_netfilter | overlay${NC} enabled"
        
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo modprobe br_netfilter" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo modprobe overlay" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "cat /etc/modules | grep -E 'overlay|br_netfilter'" &> /dev/null && modules=0
  [ "${OS_VER}" == "xUbuntu_22.04" ] && echo "${modules}" | grep '1' &> /dev/null && ssh ${install_list} "echo "overlay" | sudo tee -a /etc/modules" &> /dev/null && ssh ${install_list} "echo "br_netfilter" | sudo tee -a /etc/modules" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "cat /etc/modules | grep -E 'overlay|br_netfilter'" &> /dev/null && echo -e " [${GREEN}●${NC}] System\t| modules ${YELLOW}br_netfilter | overlay${NC} enabled"
}

function system-enable-ipv4-forward()
{
  #ipv4_forward setup
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo sed -i 's|#net.ipv4.ip_forward=1|net.ipv4.ip_forward = 1|g' /etc/sysctl.conf" &> /dev/null
  ssh ${install_list} "cat /etc/sysctl.conf | grep 'net.ipv4.ip_forward = 1'" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "echo "net.ipv4.ip_forward = 1" | sudo tee -a /etc/sysctl.conf" &> /dev/null
  ssh ${install_list} "cat /etc/sysctl.conf | grep 'net.bridge.bridge-nf-call-iptables = 1'" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "echo "net.bridge.bridge-nf-call-iptables = 1" | sudo tee -a /etc/sysctl.conf" &> /dev/null
  ssh ${install_list} "cat /etc/sysctl.conf | grep 'net.ipv4.conf.default.rp_filter = 1'" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "echo "net.ipv4.conf.default.rp_filter = 1" | sudo tee -a /etc/sysctl.conf" &> /dev/null
  ssh ${install_list} "cat /etc/sysctl.conf | grep 'net.ipv4.conf.all.rp_filter = 1'" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "echo "net.ipv4.conf.all.rp_filter = 1" | sudo tee -a /etc/sysctl.conf" &> /dev/null
  ssh ${install_list} "sudo sysctl -p /etc/sysctl.conf" &> /dev/null
  echo -e " [${GREEN}●${NC}] System\t| ipv4_forward enabled"
}

function system-disable-ipv6()
{
  #disable ipv6
  ssh ${install_list} "cat /etc/sysctl.conf | grep 'net.ipv6.conf.all.disable_ipv6 = 1'" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "echo "net.ipv6.conf.all.disable_ipv6 = 1" | sudo tee -a /etc/sysctl.conf" &> /dev/null
  ssh ${install_list} "cat /etc/sysctl.conf | grep 'net.ipv6.conf.default.disable_ipv6 = 1'" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "echo "net.ipv6.conf.default.disable_ipv6 = 1" | sudo tee -a /etc/sysctl.conf" &> /dev/null
  ssh ${install_list} "sudo sysctl --system 2> /dev/null | grep 'net.ipv4.ip_forward'" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && echo -e " [${GREEN}●${NC}] System\t| ipv6 disabled"

  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} 'sed "s|GRUB_CMDLINE_LINUX=\"\"|GRUB_CMDLINE_LINUX=\"ipv6.disable=1\"|g" /etc/default/grub | sudo tee /etc/default/grub' &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo update-grub" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && echo -e " [${GREEN}●${NC}] System\t| ipv6 disabled"
}

function interrupt()
{
  echo
  [ ${#} == 0 ] || echo -e "${@}"
  read -s -n1 -p "$(echo -e ${RED}Press 'N/n' to stop, other key to continue.${NC})" ans; echo -e "\n"
  case ${ans} in
  n|N)
    echo -e "${RED}Interrupted!${NC}\n"; exit
    ;;
  *)
    ;;
  esac
}

function node-selector()
{
  echo "${@}" | grep -wE "hosts|local" &> /dev/null
  [ ${?} != 0 ] && [ -z ${2} ] && node-message ${@} && exit
  list=$(echo "${CP_NODES}${WK_NODES}" | sed 's/ /|/g' | sed 's/.$//')
  parameter=${@}
  test=${1}
  while true
    do
      echo "${1}" | grep -vwE "hosts|local|cp|wk|${list}" &> /dev/null
      [ ${?} == 0 ] && shift || break
    done

  echo ${@} | sed 's/ /\n/g' | grep -vwE "${list}" &> /dev/null
  [ ${?} == 0 ] && status=3 || status=2
  echo ${@} | grep -w "hosts" &> /dev/null
  [ ${?} == 0 ] && status=0
  echo ${@} | grep -w "local" &> /dev/null
  [ ${?} == 0 ] && status=1
  echo ${@} | grep -w "cp" &> /dev/null
  [ ${?} == 0 ] && status=4
  echo ${@} | grep -w "wk" &> /dev/null
  [ ${?} == 0 ] && status=5

  if [ "${status}" == "0" ]
    then
      list=$(echo "${CP_NODES} ${WK_NODES}")
      cp_nodes=$(echo "${list}" | tr -s ' ' '\n' | grep "\-m" | tr -s '\n' ' ')
      wk_nodes=$(echo "${list}" | tr -s ' ' '\n' | grep "\-w" | tr -s '\n' ' ')
  elif [ "${status}" == "1" ]
    then
      list=$(hostname)
      cp_nodes=$(echo "${list}" | tr -s ' ' '\n' | grep "\-m" | tr -s '\n' ' ')
      wk_nodes=$(echo "${list}" | tr -s ' ' '\n' | grep "\-w" | tr -s '\n' ' ')
  elif [ "${status}" == "2" ]
    then
      list=${@}
      cp_nodes=$(echo "${list}" | tr -s ' ' '\n' | grep "\-m" | tr -s '\n' ' ')
      wk_nodes=$(echo "${list}" | tr -s ' ' '\n' | grep "\-w" | tr -s '\n' ' ')
  elif [ "${status}" == "3" ]
    then
      parameter=$(echo ${parameter} | sed 's/ /\n/g' | grep -v ${test} | sed ":a;N;s/\\n/ /g;ta")
      echo -e "${YELLOW} \"${parameter}\" ${NC}is not effective parameter!"
      echo -e "${RED} Please check out hostname list: ${YELLOW}${ALL_NODES}${NC},${RED}or input parameter:${NC}"
      echo -e "${YELLOW}  > [ local\t| for this host ]${NC}"
      echo -e "${YELLOW}  > [ hosts\t| for all nodes in /etc/hosts ]${NC}"
      echo -e "${YELLOW}  > [ cp\t| for all control-plane nodes ]${NC}"
      echo -e "${YELLOW}  > [ wk\t| for all worker nodes ]${NC}" && exit
  elif [ "${status}" == "4" ]
    then
      list=$(echo "${CP_NODES} ${WK_NODES}")
      cp_nodes=$(echo "${list}" | tr -s ' ' '\n' | grep "\-m" | tr -s '\n' ' ')
  elif [ "${status}" == "5" ]
    then
      list=$(echo "${CP_NODES} ${WK_NODES}")
      wk_nodes=$(echo "${list}" | tr -s ' ' '\n' | grep "\-w" | tr -s '\n' ' ')
  fi
}

function node-message()
{
  echo -e "${RED} Please input parameter after ${YELLOW}\"${@}\" ${NC}"
  echo -e "${YELLOW}  > [ local\t| for this host ]${NC}"
  echo -e "${YELLOW}  > [ hosts\t| for all nodes in /etc/hosts ]${NC}"
  echo -e "${YELLOW}  > [ node\t| for specify nodes ]${NC}"
  echo -e "${YELLOW}  > [ cp\t| for all control-plane nodes ]${NC}"
  echo -e "${YELLOW}  > [ wk\t| for all worker nodes ]${NC}"
}

function cp-node-message()
{
  echo -e "${RED} Please input parameter after ${YELLOW}\"${@}\" ${NC}"
  echo -e "${YELLOW}  > [ local\t| for this host ]${NC}"
  echo -e "${YELLOW}  > [ hosts\t| for all control-plane nodes in /etc/hosts ]${NC}"
  echo -e "${YELLOW}  > [ node\t| for specify nodes ]${NC}"
}

function wk-node-message()
{
  echo -e "${RED} Please input parameter after ${YELLOW}\"${@}\" ${NC}"
  echo -e "${YELLOW}  > [ local\t| for this host ]${NC}"
  echo -e "${YELLOW}  > [ hosts\t| for all worker nodes in /etc/hosts ]${NC}"
  echo -e "${YELLOW}  > [ node\t| for specify nodes ]${NC}"
}

function exclude-non-join()
{
  #Exclude non-join nodes
  which kubectl &> /dev/null
  [ ${?} == 0 ] && status=1 || status=0
  [ "${status}" == "0" ] && echo -e " [${YELLOW}●${NC}] This node not activate.\n" && exit
  [ "${status}" == "1" ] && cp_list=$(kubectl get nodes | tail -n +2 | awk '{ print $1 }' | grep '\-m' | tr -s '\n' '|' | sed '$ s/.$//')
  [ "${status}" == "1" ] && wk_list=$(kubectl get nodes | tail -n +2 | awk '{ print $1 }' | grep '\-w' | tr -s '\n' '|' | sed '$ s/.$//')
  [ "${status}" == "1" ] && cp_nodes=$(echo ${cp_nodes} | tr -s ' ' '\n' | grep -E ${cp_list} | tr -s '\n' ' ')
  [ "${status}" == "1" ] && wk_nodes=$(echo ${wk_nodes} | tr -s ' ' '\n' | grep -E ${wk_list} | tr -s '\n' ' ')
}

function node-power()
{
  echo "${@}" | grep -wE "reboot|off" &> /dev/null
  [ ${?} != 0 ] && echo -e "${RED}Please input parameter [ reboot | off ]${NC}\n" && exit
  echo "${@}" | grep -w "reboot" &> /dev/null && power=reboot
  echo "${@}" | grep -w "off" &> /dev/null && power=poweroff
  [ -z ${3} ] && node-message ${2} && exit
  parameter=$(echo "${@}" | sed 's/ /\n/g' | grep -vwE "reboot|off" | sed ":a;N;s/\\n/ /g;ta")
  node-selector ${parameter}

  cp_nodes=$(echo ${cp_nodes} | tr -s ' ' '\n' | tac | tr -s '\n' ' ')
  interrupt ${RED}Continue to ${power} nodes:${YELLOW} ${wk_nodes} ${cp_nodes}${NC}
  echo -e "${YELLOW}nodes ${power} procedure${NC}"
  for list in ${wk_nodes} ${cp_nodes}
    do
      echo -e " [${GREEN}●${NC}] ${list} ${power} execute${NC}"
      sleep 3
      ssh ${list} "sudo ${power}" 2> /dev/null
    done; echo
}

function package-repository-add()
{
  #cri-o package repository
  crio-available-version-check &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && OS_VER="CentOS_8_Stream"

  if [ "${OS_VER}" == "CentOS_8_Stream" ]
    then
      [ "${VER_CONTROL}" == "latest" ] && for list in 1
        do
          status=0
          [ "${VER_CONTROL}" == "latest" ] && curl -s https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${OS_VER}/devel:kubic:libcontainers:stable.repo | grep 'devel_kubic_libcontainers_stable' &> /dev/null && status=1
          [ "${VER_CONTROL}" == "latest" ] && echo ${status} | grep "1" &> /dev/null && ssh ${install_list} "sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${OS_VER}/devel:kubic:libcontainers:stable.repo" &> /dev/null && status=0
          [ "${VER_CONTROL}" == "latest" ] && curl -s https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${CRIO_RELEASE}/${OS_VER}/devel:kubic:libcontainers:stable:cri-o:${CRIO_RELEASE}.repo | grep 'devel_kubic_libcontainers_stable' &> /dev/null && status=1
          [ "${VER_CONTROL}" == "latest" ] && echo ${status} | grep "1" &> /dev/null && ssh ${install_list} "sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:${CRIO_RELEASE}.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${CRIO_RELEASE}/${OS_VER}/devel:kubic:libcontainers:stable:cri-o:${CRIO_RELEASE}.repo" &> /dev/null
          [ "${VER_CONTROL}" == "latest" ] && echo ${status} | grep "1" &> /dev/null && echo -e " [${GREEN}●${NC}] Repository\t| ${CRIO_RELEASE} repository has been added" #|| echo -e " [${YELLOW}●${NC}] ${CRIO_RELEASE} repository not exist"
        done

      [ "${VER_CONTROL}" == "sub" ] && for list in ${CRIO_AVL_VER}
        do
          status=0
          [ "${VER_CONTROL}" == "sub" ] && curl -s https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${OS_VER}/devel:kubic:libcontainers:stable.repo | grep 'devel_kubic_libcontainers_stable' &> /dev/null && status=1
          [ "${VER_CONTROL}" == "sub" ] && echo ${status} | grep "1" &> /dev/null && ssh ${install_list} "sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${OS_VER}/devel:kubic:libcontainers:stable.repo" &> /dev/null && status=0
          [ "${VER_CONTROL}" == "sub" ] && curl -s https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${CRIO_RELEASE}:/${list}/${OS_VER}/devel:kubic:libcontainers:stable:cri-o:${CRIO_RELEASE}:${list}.repo | grep 'devel_kubic_libcontainers_stable' &> /dev/null && status=1
          [ "${VER_CONTROL}" == "sub" ] && echo ${status} | grep "1" &> /dev/null && ssh ${install_list} "sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:${CRIO_RELEASE}:${list}.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${CRIO_RELEASE}:/${list}/${OS_VER}/devel:kubic:libcontainers:stable:cri-o:${CRIO_RELEASE}:${list}.repo" &> /dev/null
          [ "${VER_CONTROL}" == "sub" ] && echo ${status} | grep "1" &> /dev/null && echo -e " [${GREEN}●${NC}] Repository\t| ${list} repository has been added" #|| echo -e " [${YELLOW}●${NC}] ${list} repository not exist"
        done
  fi

  if [ "${OS_VER}" == "xUbuntu_22.04" ]
    then
      #Podman latest version
      ssh ${install_list} "echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/${OS_VER}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list" &> /dev/null
      ssh ${install_list} "curl -fsSL "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/${OS_VER}/Release.key" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/devel_kubic_libcontainers_unstable.gpg" &> /dev/null
      ssh ${install_list} "ls -l /etc/apt/trusted.gpg.d/devel_kubic_libcontainers_unstable.gpg" &> /dev/null
      [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Repository\t| podman repository added" || echo -e " [${RED}●${NC}] Repository\t| podman repository not added"

      [ "${VER_CONTROL}" == "latest" ] && for list in 1
        do
          status=0
          curl -s https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${OS_VER}/Release.key | grep 'BEGIN PGP PUBLIC KEY BLOCK' &> /dev/null && status=1
          [ "${status}" == "1" ] && ssh ${install_list} "echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${OS_VER}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list" &> /dev/null && ssh ${install_list} "curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${OS_VER}/Release.key | sudo apt-key add - " &> /dev/null && status=0
          ssh ${install_list} "ls -al /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list" &> /dev/null
          [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Repository\t| cri-o repository added" || echo -e " [${RED}●${NC}] Repository\t| cri-o repository not added"
        done

      [ "${VER_CONTROL}" == "sub" ] && for list in ${CRIO_AVL_VER}
        do
          status=0
          curl -s https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${CRIO_RELEASE}:/${list}/${OS_VER}/Release.key | grep 'BEGIN PGP PUBLIC KEY BLOCK' &> /dev/null && status=1
          [ "${status}" == "1" ] && ssh ${install_list} "echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${CRIO_RELEASE}:/${list}/${OS_VER}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:${CRIO_RELEASE}:${list}.list" &> /dev/null && ssh ${install_list} "curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${CRIO_RELEASE}:/${CRIO_SUBVER}/${OS_VER}/Release.key | sudo apt-key add - " &> /dev/null && status=0
          ssh ${install_list} "ls -al /etc/apt/sources.list.d/*${list}*" &> /dev/null
          [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Repository\t| cri-o ${list} repository added" || echo -e " [${RED}●${NC}] Repository\t| cri-o ${list} repository not added"
        done
  fi

  #Kubernetes package repository
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} 'sudo bash -c "cat << \EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF"' && echo -e " [${GREEN}●${NC}] Repository\t| kubernetes.repo has been added"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring ${K8S_GPG_PATH}cloud.google.gpg add -" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list" &> /dev/null
  #[ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo curl -fsSLo ${K8S_GPG_PATH}kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg" &> /dev/null
  #[ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "echo "deb [signed-by=${K8S_GPG_PATH}kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list" &> /dev/null
  #[ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "ls -al /etc/apt/sources.list.d/*kube* &> /dev/null" && echo -e " [${GREEN}●${NC}] Repository\t| Kubernetes package repository added" || echo -e " [${RED}●${NC}] Repository\t| Kubernetes package repository not added"

  #helm package repository
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "ls -al /etc/apt/sources.list.d/*helm* &> /dev/null" && echo -e " [${GREEN}●${NC}] Repository\t| Helm package repository added" || echo -e " [${RED}●${NC}] Repository\t| Helm package repository not added"
  
  #update list
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo dnf clean all" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Repository\t| cache cleanup"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo dnf versionlock delete cri-o kubectl kubeadm kubelet podman" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo dnf makecache" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Repository\t| cache updated"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo apt -qy update" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Repository\t| cache updated"
  #sudo rm /etc/yum.repos.d/devel:*
}

function package-check()
{
  #[ -z ${1} ] && node-message ${@} && exit
  node-selector ${@}
  #cri-o
  crio_version="crio version | grep "^Version""
  crio_status="sudo systemctl status crio | grep 'Active'"
  crio_time="sudo systemctl status crio | grep 'Active' | cut -d ';' -f 2 | grep -v 'inactive'"
  #kubelet
  kubelet_version="kubelet --version | sed 's/v//g' 2> /dev/null"
  kubelet_active="sudo systemctl status kubelet | grep 'Main PID' | grep 'kubelet' 2> /dev/null"
  kubelet_status="sudo systemctl status kubelet | grep 'Active' 2> /dev/null"
  kubelet_time="sudo systemctl status kubelet | grep 'Active' | cut -d ';' -f 2 | grep -v 'inactive' 2> /dev/null"
  #kubeadm
  kubeadm_version="kubeadm version -o yaml | grep 'gitVersion' | sed 's/v//g'"
  #kubectl
  kubectl_versio="kubectl version -o yaml 2>&1 | grep -A 9 'clientVersion:' | grep 'gitVersion' | sed 's/v//g'"

  for clist in ${cp_nodes}
    do
      echo -e "${YELLOW}${clist} | Package status${NC}"
      ssh ${clist} 'hostname' &> /dev/null 2>&1
      [ ${?} != 0 ] && echo -e " [${RED}●${NC}] This node not available\n" && continue

      #cri-o
      status=0
      ssh ${clist} "which crio > /dev/null 2>&1"
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] crio\t| not install" && status=1
      #Status active
      ssh ${clist} "sudo systemctl status crio 2> /dev/null | grep "Active:" | grep "failed" &> /dev/null" && status=0
      [ ${?} != 0 ] && [ "${status}" == 0 ] && echo -e " [${GREEN}●${NC}] crio\t| `ssh ${clist} ${crio_version} 2>&1 | sed '/time/d' | awk '{ print $2 }'` | `ssh ${clist} ${crio_status} | awk '{ print $2,$3 }'` | `ssh ${clist} ${crio_time} | sed 's/^.//' | grep -v 'inactive'`"
      #Status failed [if cri-o has been install]
      ssh ${clist} "sudo systemctl status crio 2> /dev/null | grep "Active:" | grep "failed" &> /dev/null" ssh ${clist} sudo systemctl status crio | grep "Loaded:" | grep -v "not-found" && status=0
      [ ${?} == 0 ] && [ "${status}" == 0 ] && echo -e " [${YELLOW}●${NC}] crio\t| `ssh ${clist} ${crio_version} 2>&1 | sed '/time/d' | awk '{ print $2 }'` | `ssh ${clist} ${crio_status} | awk '{ print $2,$3,$4 }'` | `ssh ${clist} ${crio_time} | sed 's/^.//'`"
      #kubelet
      ssh ${clist} "which kubelet" &> /dev/null
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] kubelet\t| not install" && status=0 || status=1
      [ "${status}" == "1" ] && ssh ${clist} "${kubelet_active}" &> /dev/null && active=0 || active=1
      [ "${status}" == "1" ] && [ "${active}" == "0" ] && echo -e " [${GREEN}●${NC}] kubelet\t| `ssh ${clist} ${kubelet_version} | awk '{ print $2 }'` | `ssh ${clist} ${kubelet_status} | awk '{ print $2,$3 }'` | `ssh ${clist} ${kubelet_time} | sed 's/^.//' | grep -v 'inactive'`"
      [ "${status}" == "1" ] && [ "${active}" == "1" ] && echo -e " [${YELLOW}●${NC}] kubelet\t| `ssh ${clist} ${kubelet_version} | awk '{ print $2 }'` | `ssh ${clist} ${kubelet_status} | awk '{ print $2,$3 }'` | `ssh ${clist} ${kubelet_time} | sed 's/^.//' | grep -v 'inactive'`"
      #kubeadm
      ssh ${clist} "which kubeadm" &> /dev/null
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] kubeadm\t| not install" || echo -e " [${GREEN}●${NC}] kubeadm\t| `ssh ${clist} ${kubeadm_version} 2>&1 | awk '{ print $2 }' `"
      #kubectl
      ssh ${clist} "which kubectl" &> /dev/null
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] kubectl\t| not install" || echo -e " [${GREEN}●${NC}] kubectl\t| `ssh ${clist} ${kubectl_versio} 2>&1 | sed '/localhost:8080/d' | awk '{ print $2 }'`"
      #helm
      ssh ${clist} "which helm" &> /dev/null
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] helm\t| not install" || echo -e " [${GREEN}●${NC}] helm\t| `ssh ${clist} helm version | awk '{ print $1 }' | cut -d '"' -f 2 | sed 's/v//g'`"
      #podman
      ssh ${clist} "which podman" &> /dev/null
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] podman\t| not install" || echo -e " [${GREEN}●${NC}] podman\t| `ssh ${clist} sudo podman version 2> /dev/null | grep '^Version' | awk '{ print $2 }'`"
      #skopeo
      ssh ${clist} "which skopeo" &> /dev/null
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] skopeo\t| not install" || echo -e " [${GREEN}●${NC}] skopeo\t| `ssh ${clist} sudo skopeo --version 2> /dev/null | awk '{ print $3 }'`"
      #k9s
      ssh ${clist} "which k9s" &> /dev/null 
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] k9s\t| not install" || echo -e " [${GREEN}●${NC}] k9s\t| `ssh ${clist} k9s version -s | grep Version | awk '{ print $2 }' | sed 's/v//g'`"
    done

  for wlist in ${wk_nodes}
    do
      echo -e "${YELLOW}${wlist} | Package status${NC}"
      ssh ${wlist} 'hostname' &> /dev/null 2>&1
      [ ${?} != 0 ] && echo -e " [${RED}●${NC}] This node not available\n" && continue
      
      #cri-o
      status=0
      ssh ${wlist} "which crio > /dev/null 2>&1"
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] crio\t| not install" && status=1
      ssh ${wlist} "sudo systemctl status crio 2> /dev/null | grep "Active:" | grep "failed" &> /dev/null" && status=0
      [ ${?} != 0 ] && [ "${status}" == 0 ] && echo -e " [${GREEN}●${NC}] crio\t| `ssh ${wlist} ${crio_version} 2>&1 | sed '/time/d' | awk '{ print $2 }'` | `ssh ${wlist} ${crio_status} | awk '{ print $2,$3 }'` | `ssh ${wlist} ${crio_time} | sed 's/^.//' | grep -v 'inactive'`"
      ssh ${wlist} "sudo systemctl status crio 2> /dev/null | grep "Active:" | grep "failed" &> /dev/null" && status=0
      [ ${?} == 0 ] && [ "${status}" == 0 ] && echo -e " [${YELLOW}●${NC}] crio\t| `ssh ${wlist} ${crio_version} 2>&1 | sed '/time/d' | awk '{ print $2 }'` | `ssh ${wlist} ${crio_status} | awk '{ print $2,$3,$4 }'` | `ssh ${wlist} ${crio_time} | sed 's/^.//'`"
      #kubelet
      ssh ${wlist} "which kubelet" &> /dev/null
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] kubelet\t| not install" && status=0 || status=1
      [ "${status}" == "1" ] && ssh ${wlist} "${kubelet_active}" &> /dev/null && active=0 || active=1
      [ "${status}" == "1" ] && [ "${active}" == "0" ] && echo -e " [${GREEN}●${NC}] kubelet\t| `ssh ${wlist} ${kubelet_version} | awk '{ print $2 }'` | `ssh ${wlist} ${kubelet_status} | awk '{ print $2,$3 }'` | `ssh ${wlist} ${kubelet_time} | sed 's/^.//' | grep -v 'inactive'`"
      [ "${status}" == "1" ] && [ "${active}" == "1" ] && echo -e " [${YELLOW}●${NC}] kubelet\t| `ssh ${wlist} ${kubelet_version} | awk '{ print $2 }'` | `ssh ${wlist} ${kubelet_status} | awk '{ print $2,$3 }'` | `ssh ${wlist} ${kubelet_time} | sed 's/^.//' | grep -v 'inactive'`"
      #kubeadm
      ssh ${wlist} "which kubeadm " &> /dev/null
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] kubeadm\t| not install" || echo -e " [${GREEN}●${NC}] kubeadm\t| `ssh ${wlist} ${kubeadm_version} 2>&1 | awk '{ print $2 }' `"
      #podman
      ssh ${wlist} "which podman" &> /dev/null
      [ ${?} != 0 ] && echo -e " [${YELLOW}●${NC}] podman\t| not install" || echo -e " [${GREEN}●${NC}] podman\t| `ssh ${wlist} sudo podman version 2> /dev/null | grep '^Version' | awk '{ print $2 }'`"
    done
}

function package-install-crio()
{
  #install cri-o
  status=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && CRI_PROVIDES=$(sudo dnf provides cri-o 2> /dev/null | grep 'Provide' | head -n 5 | cut -d '=' -f 2 | grep ${CRIO_RELEASE} | head -n 1 | sed 's/^.//')

  [ "${OS_VER}" == "RHEL_8" ] && [ "${VER_CONTROL}" == "sub" ] && ssh ${install_list} "sudo dnf install -y cri-o-${CRIO_SUBVER}-* crun" > /dev/null 2>&1 && status=1
  [ "${status}" == "0" ] && ssh ${install_list} "sudo dnf install -y cri-o-${CRI_PROVIDES} crun" > /dev/null 2>&1 && status=1
  [ "${OS_VER}" == "RHEL_8" ] && [ "${VER_CONTROL}" == "latest" ] && ssh ${install_list} "sudo dnf install -y cri-o-${CRIO_RELEASE}.* crun" > /dev/null 2>&1

  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${VER_CONTROL}" == "sub" ] && ssh ${install_list} "sudo dnf install -y cri-o-${CRIO_SUBVER}-* crun" > /dev/null 2>&1 && status=1
  [ "${status}" == "0" ] && ssh ${install_list} "sudo dnf install -y cri-o-${CRI_PROVIDES} crun" > /dev/null 2>&1 && status=1
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${VER_CONTROL}" == "latest" ] && ssh ${install_list} "sudo dnf install -y cri-o-${CRIO_RELEASE}.* crun" > /dev/null 2>&1
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${VER_CONTROL}" == "sub" ] && ssh ${install_list} "sudo apt install -qy -o Dpkg::Options::="--force-confold" cri-o=${CRIO_SUBVER}~* crun" &> /dev/null && status=1
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${VER_CONTROL}" == "latest" ] && ssh ${install_list} "sudo apt install -qy -o Dpkg::Options::="--force-confold" cri-o=${CRIO_RELEASE}~* crun" > /dev/null 2>&1

  ssh ${install_list} "sudo sed -i '/'1100:200'/d' /etc/cni/net.d/100-crio-bridge.conflist" &> /dev/null
  ssh ${install_list} "sudo sed -i '/\"dst\": \"::\/0\"/d' /etc/cni/net.d/100-crio-bridge.conflist" &> /dev/null
  ssh ${install_list} "sudo sed -i 's|{ \"dst\": \"0.0.0.0/0\" },|{ \"dst\": \"0.0.0.0/0\" }|g' /etc/cni/net.d/100-crio-bridge.conflist" &> /dev/null
  ssh ${install_list} "sudo sed -i 's|\[{ \"subnet\": \"10.85.0.0/16\" }\],|\[{ \"subnet\": \"10.85.0.0/16\" }\]|g' /etc/cni/net.d/100-crio-bridge.conflist" &> /dev/null
  crio-install-check ${install_list}
}

function package-configure-crio()
{
  #setup /etc/crio/crio.conf
  ssh ${install_list} cat /etc/crio/crio.conf 2> /dev/null | grep -A 3 "\[crio.runtime\]" | grep "conmon_cgroup = \"pod\"" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "sudo sed -i 's/\[crio.runtime\]/\[crio.runtime\]\nconmon_cgroup = \"pod\"\ncgroup_manager = \"systemd\"\ndefault_runtime = \"crun\"/g' /etc/crio/crio.conf" &> /dev/null
  ssh ${install_list} cat /etc/crio/crio.conf 2> /dev/null | grep -A 3 "\[crio.runtime.runtimes.crun\]" | grep "runtime_path = \"/usr/local/bin/crun\"" &> /dev/null #/usr/bin/crun
  [ ${?} != 0 ] && ssh ${install_list} "sudo sed -i 's/# \[crio.runtime.runtimes.runc\]/\[crio.runtime.runtimes.crun\]\nruntime_path = \"\/usr\/bin\/crun\"\nruntime_type = \"oci\"\nruntime_root = \"\"/g' /etc/crio/crio.conf" &> /dev/null
  ssh ${install_list} cat /etc/crio/crio.conf 2> /dev/null | grep -A 2 "\[crio.network\]" | grep "network_dir = \"/etc/cni/net.d/\"" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "sudo sed -i 's/\[crio.network\]/\[crio.network\]\nnetwork_dir = \"\/etc\/cni\/net.d\/\"\nplugin_dir = \"\/opt\/cni\/bin\"/g' /etc/crio/crio.conf" &> /dev/null
  ssh ${install_list} cat /etc/crio/crio.conf  > /dev/null 2>&1
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Package\t| crio.conf configured" || echo -e " [${YELLOW}●${NC}] Package\t| crio.conf not exist"
}

function image-repository-setting()
{
  #Setup image repository registries
  #target='#\ unqualified-search-registries\ =\ \[\"example.com\"\]'
  #replace='unqualified-search-registries = \[\"docker.io\", \"quay.io\"\]'
  #sed_context="sudo sed -i 's/${target}/${replace}/g' /etc/containers/registries.conf"
  
  source=$(cat /etc/containers/registries.conf | grep 'unqualified-search-registries')
  replace='\"docker.io\", \"quay.io\"'
  target='\"docker.io\", \"quay.io\", \"registry.vattenlab.com\"'
  sudo sed -i "s/${replace}/${target}/g" /etc/containers/registries.conf

  ssh ${install_list} cat /etc/containers/registries.conf | grep "${replace}" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "${sed_context}"

  #Setup image repository policy
  ssh ${install_list} 'sudo bash -c "cat << \EOF > /etc/containers/policy.json
{
    \"default\": [
        {
            \"type\": \"insecureAcceptAnything\"
        }
    ],
    \"transports\":
        {
            \"docker-daemon\":
                {
                    \"\": [{\"type\":\"insecureAcceptAnything\"}]
                }
        }
}
EOF"' &> /dev/null && echo -e " [${GREEN}●${NC}] Package\t| policy.json updated"
}

function package-install-podman()
{
  #install podman
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo dnf install -y podman=${PODMAN_VER}*" &> /dev/null

  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo dnf install -y podman=${PODMAN_VER}*" &> /dev/null

  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo apt install -qy podman=${PODMAN_VER}*" &> /dev/null
  podman-install-check ${install_list}
}

function package-install-skopeo()
{
  #install podman
  #[ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo dnf install -y skopeo=${SKOPEO_VER}*" &> /dev/null

  #[ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo dnf install -y skopeo=${SKOPEO_VER}*" &> /dev/null

  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo apt install -qy skopeo=${SKOPEO_VER}*" &> /dev/null
  skopeo-install-check ${install_list}
}

function package-install-kube-package()
{
  #install kube-package
  curl -s https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg | grep '<title>' | grep 'Error' &> /dev/null
  [ ${?} == 0 ] && echo -e " [${RED}●${NC}] Google server rpm-pkg-key.gpg is missing"
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo dnf versionlock delete kubeadm kubelet kubectl" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo dnf install -y kubernetes-cni" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo dnf install -y kubelet-${KUBE_SUBVER}-* kubeadm-${KUBE_SUBVER}-* kubectl-${KUBE_SUBVER}-* --disableexcludes=kubernetes" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "sudo dnf versionlock add kubelet kubeadm kubectl" &> /dev/null

  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo dnf versionlock delete kubeadm kubelet kubectl" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo dnf install -y kubernetes-cni" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo dnf install -y kubelet-${KUBE_SUBVER}-* kubeadm-${KUBE_SUBVER}-* kubectl-${KUBE_SUBVER}-* --disableexcludes=kubernetes" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "sudo dnf versionlock add kubelet kubeadm kubectl" &> /dev/null

  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo apt-mark unhold kubeadm kubelet kubectl" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo apt install -qy kubernetes-cni" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo apt install -qy apt-transport-https --yes" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo apt install -qy kubeadm=${KUBE_SUBVER}-* kubelet=${KUBE_SUBVER}-* kubectl=${KUBE_SUBVER}-*" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo systemctl daemon-reload" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo apt-mark hold kubeadm kubelet kubectl" &> /dev/null

  kubelet-install-check ${install_list}
  kubeadm-install-check ${install_list}
  kubectl-instal-check ${install_list}
}

function package-install-k9s()
{
  #install k9s
  ssh ${install_list} "ls -al ~/bin/k9s" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Package\t| k9s installed" && daemon-enable ${install_list} || curl --max-time 5 -fsSLq https://webinstall.dev/api/installers/k9s@stable.sh &> /dev/null && ssh ${install_list} "curl -sS https://webinstall.dev/k9s | bash" &> /dev/null
  #k9s path setup
  ssh ${install_list} "mv ~/.local/bin/k9s ~/bin/" &> /dev/null
  ssh ${install_list} "cat /etc/environment | grep "/home/${USER}/bin" &> /dev/null" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "cat /etc/environment | tr -s ':' '\n' | sed 's/\/snap\/bin\"/\/snap\/bin\n\/home\/${USER}\/bin\"/g' | tr -s '\n' ':' | sed '$ s/.$//' | sudo tee /etc/environment &> /dev/null" &> /dev/null
  ssh ${install_list} "cat /etc/profile | grep 'export EDITOR=nano' &> /dev/null" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "echo "export EDITOR=nano" | sudo tee -a /etc/profile" &> /dev/null
  ssh ${install_list} "cat /etc/profile | grep 'export K9S_EDITOR=nano' &> /dev/null" &> /dev/null
  [ ${?} != 0 ] && ssh ${install_list} "echo "export K9S_EDITOR=nano" | sudo tee -a /etc/profile" &> /dev/null
  ssh ${install_list} "rm -r ~/Downloads/" &> /dev/null

  ssh ${install_list} "ls -al ~/bin/k9s" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Package\t| k9s installed" || echo -e " [${RED}●${NC}] k9s\t| not install"
}

function package-install-helm()
{
  #install helm
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${install_list} "bash <(wget -q -o /dev/null -O - get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3)" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${install_list} "bash <(wget -q -o /dev/null -O - get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3)" &> /dev/null

  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo apt -qy update" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${install_list} "sudo apt install -qy helm=${HELM_VER}*" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Package\t| helm installed" || echo -e " [${RED}●${NC}] Package\t| helm\t| not installed"
}

function package-install-docker()
{
  #insatll docker
  ssh ${1} ls /etc/apt/keyrings/docker.gpg &> /dev/null
  [ ${?} == 0 ] && ssh ${1} sudo rm /etc/apt/keyrings/docker.gpg &> /dev/null || ssh ${1} "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg"
  ssh ${1} "echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null"
  ssh ${1} sudo apt update
  ssh ${1} sudo apt install -qy docker-ce docker-ce-cli docker-buildx-plugin docker-compose-plugin
}

function package-install-docker-compose()
{
  #insatll docker-compose
  ssh ${1} sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VER}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/bin/docker-compose
  ssh ${1} sudo chmod +x /usr/bin/docker-compose
}

function package-remove-k9s()
{
  status=0
  ssh ${remove_list} "which k9s" &> /dev/null || status=2
  [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] k9s\t| not install"
  [ "${status}" == "0" ] && ssh ${remove_list} "rm ~/bin/k9s" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] k9s\t| removed"
  ssh ${remove_list} "which k9s" &> /dev/null && status=1
  [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] k9s\t| not remove"
}

function package-remove-kube()
{
  #RHEL
  status=0
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which kubeadm" &> /dev/null || status=2
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] kubeadm\t| not install"
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf versionlock delete kubeadm" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y kubeadm" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "RHEL_8" ] &&  echo -e " [${GREEN}●${NC}] kubeadm\t| removed"
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which kubeadm" &> /dev/null && status=1
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] kubeadm\t| not remove"

  status=0
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which kubectl" &> /dev/null || status=2
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] kubectl\t| not install"
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf versionlock delete kubectl" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y kubectl" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "RHEL_8" ] && echo -e " [${GREEN}●${NC}] kubectl\t| removed"
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which kubectl" &> /dev/null && status=1
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] kubectl\t| not remove"

  status=0
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which kubelet" &> /dev/null || status=2
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] kubelet\t| not install"
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf versionlock delete kubelet" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo systemctl disable --now kubelet" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y kubelet" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "RHEL_8" ] && echo -e " [${GREEN}●${NC}] kubelet\t| removed"
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which kubelet" &> /dev/null && status=1
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] kubelet\t| not remove"

  #Rocky
  status=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which kubeadm" &> /dev/null || status=2
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] kubeadm\t| not install"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf versionlock delete kubeadm" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y kubeadm" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "CentOS_8_Stream" ] && echo -e " [${GREEN}●${NC}] kubeadm\t| removed"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which kubeadm" &> /dev/null && status=1
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] kubeadm\t| not remove"

  status=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which kubectl" &> /dev/null || status=2
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] kubelet\t| not install"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf versionlock delete kubectl" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y kubectl" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "CentOS_8_Stream" ] && echo -e " [${GREEN}●${NC}] kubectl\t| removed"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which kubectl" &> /dev/null && status=1
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] kubectl\t| not remove"

  status=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which kubelet" &> /dev/null || status=2
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] kubelet\t| not install"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf versionlock delete kubelet" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo systemctl disable --now kubelet" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y kubelet" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "CentOS_8_Stream" ] &&  echo -e " [${GREEN}●${NC}] kubelet\t| removed"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which kubelet" &> /dev/null && status=1
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] kubelet\t| not remove"

  #Ubuntu
  status=0
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which kubeadm" &> /dev/null || status=2
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] kubeadm\t| not install"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo apt-mark unhold kubeadm" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo apt purge -qy --allow-change-held-packages kubeadm" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "xUbuntu_22.04" ] &&  echo -e " [${GREEN}●${NC}] kubeadm\t| removed"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which kubeadm" &> /dev/null && status=1
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] kubeadm\t| not remove"
  
  status=0
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which kubectl" &> /dev/null || status=2
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] kubectl\t| not install"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo apt-mark unhold kubectl" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo apt purge -qy --allow-change-held-packages kubectl" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "xUbuntu_22.04" ] &&  echo -e " [${GREEN}●${NC}] kubectl\t| removed"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which kubectl" &> /dev/null && status=1
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] kubectl\t| not remove"
  
  status=0
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which kubelet" &> /dev/null || status=2
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] kubelet\t| not install"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo apt-mark unhold kubelet" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo systemctl disable --now kubelet" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo apt purge -qy --allow-change-held-packages kubelet kubernetes-cni" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "xUbuntu_22.04" ] &&  echo -e " [${GREEN}●${NC}] kubelet\t| removed"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which kubelet" &> /dev/null && status=1
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] kubelet\t| not remove"
}

function package-remove-crio()
{
  #RHEL
  status=0
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which crio" &> /dev/null || status=2
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] cri-o\t| not install"
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo systemctl disable --now cri-o" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y cri-o" &> /dev/null
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo rm $(which crio)" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "RHEL_8" ] && echo -e " [${GREEN}●${NC}] cri-o removed"
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which crio" &> /dev/null && status=1
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] cri-o\t| not remove"

  #Rocky
  status=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which crio" &> /dev/null || status=2
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] cri-o\t| not install"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo systemctl disable --now cri-o" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y cri-o" &> /dev/null
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo rm $(which crio)"
  [ ${?} == 0 ] && [ "${OS_VER}" == "CentOS_8_Stream" ] && echo -e " [${GREEN}●${NC}] cri-o removed"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which crio" &> /dev/null && status=1
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] cri-o\t| not remove"

  #Ubuntu
  status=0
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which crio" &> /dev/null || status=2
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] cri-o\t| not install"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo systemctl disable --now crio" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo apt purge -qy --allow-change-held-packages cri-o" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo rm $(which crio)" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "xUbuntu_22.04" ] && echo -e " [${GREEN}●${NC}] cri-o removed"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which crio" &> /dev/null && status=1
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] cri-o\t| not remove"
}

function package-remove-helm()
{
  #RHEL
  status=0
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which helm" &> /dev/null || status=2
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] helm\t| not install"
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} 'sudo rm `which helm`' &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "RHEL_8" ] && echo -e " [${GREEN}●${NC}] helm\t| removed"
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which helm" &> /dev/null && status=1
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] helm\t| not remove"

  #Rocky
  status=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which helm" &> /dev/null || status=2
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] helm\t| not install"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} 'sudo rm `which helm`' &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "CentOS_8_Stream" ] && echo -e " [${GREEN}●${NC}] helm\t| removed"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which helm" &> /dev/null && status=1
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] helm\t| not remove"

  #Ubuntu
  status=0
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which helm" &> /dev/null || status=2
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] helm\t| not install"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo apt remove -qy --purge --allow-change-held-packages helm" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "xUbuntu_22.04" ] && echo -e " [${GREEN}●${NC}] helm\t| removed"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which helm" &> /dev/null && status=1
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] helm\t| not remove"
}

function package-remove-podman()
{
  #RHEL
  status=0
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which podman" &> /dev/null || status=2
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] podman\t| not install"
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y podman" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "RHEL_8" ] && echo -e " [${GREEN}●${NC}] podman\t| removed"
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which podman" &> /dev/null && status=1
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] podman\t| not remove"

  #Rocky
  status=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which podman" &> /dev/null || status=2
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] podman\t| not install"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y podman" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "CentOS_8_Stream" ] && echo -e " [${GREEN}●${NC}] podman\t| removed"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which podman" &> /dev/null && status=1
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] podman\t| not remove"

  #Ubuntu
  status=0
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which podman" &> /dev/null || status=2
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] podman\t| not install"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo apt remove -qy --purge --allow-change-held-packages podman buildah" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "xUbuntu_22.04" ] && echo -e " [${GREEN}●${NC}] podman\t| removed"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which podman" &> /dev/null && status=1
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] podman\t| not remove"
}

function package-remove-skopeo()
{
  #RHEL
  status=0
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which skopeo" &> /dev/null || status=2
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] skopeo\t| not install"
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y skopeo" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "RHEL_8" ] && echo -e " [${GREEN}●${NC}] skopeo\t| removed"
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "which skopeo" &> /dev/null && status=1
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] skopeo\t| not remove"

  #Rocky
  status=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which skopeo" &> /dev/null || status=2
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] skopeo\t| not install"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo dnf remove -y skopeo" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "CentOS_8_Stream" ] && echo -e " [${GREEN}●${NC}] skopeo\t| removed"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "which skopeo" &> /dev/null && status=1
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] skopeo\t| not remove"

  #Ubuntu
  status=0
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which skopeo" &> /dev/null || status=2
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "2" ] && echo -e " [${RED}●${NC}] skopeo\t| not install"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && ssh ${remove_list} "sudo apt remove -qy --purge --allow-change-held-packages skopeo" &> /dev/null
  [ ${?} == 0 ] && [ "${OS_VER}" == "xUbuntu_22.04" ] && echo -e " [${GREEN}●${NC}] skopeo\t| removed"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "which skopeo" &> /dev/null && status=1
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "1" ] && echo -e " [${RED}●${NC}] skopeo\t| not remove"
}

function package-remove-daemon-reload()
{
  status=0
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${remove_list} "sudo dnf autoremove -y"
  [ "${OS_VER}" == "RHEL_8" ] && ssh ${cremove_listlist} "sudo systemctl daemon-reload" &> /dev/null && status=1 || status=0
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "1" ] && echo -e " [${GREEN}●${NC}] daemon\t| reloaded"
  [ "${OS_VER}" == "RHEL_8" ] && [ "${status}" == "0" ] && echo -e " [${RED}●${NC}] daemon\t| not reload"
  
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "sudo dnf autoremove -y"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && ssh ${remove_list} "sudo systemctl daemon-reload" &> /dev/null && status=1 || status=0
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "1" ] && echo -e " [${GREEN}●${NC}] daemon\t| reloaded"
  [ "${OS_VER}" == "CentOS_8_Stream" ] && [ "${status}" == "0" ] && echo -e " [${RED}●${NC}] daemon\t| not reload"
  
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "sudo apt -qy --allow-change-held-packages autoremove" &> /dev/null
  [ "${OS_VER}" == "xUbuntu_22.04" ] && ssh ${remove_list} "sudo systemctl daemon-reload" && status=1 || status=0
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "1" ] && echo -e " [${GREEN}●${NC}] daemon\t| reloaded"
  [ "${OS_VER}" == "xUbuntu_22.04" ] && [ "${status}" == "0" ] && echo -e " [${RED}●${NC}] daemon\t| not reload"
}

function kubectl-instal-check()
{
  status=0
  ssh ${1} "which kubectl" &> /dev/null
  [ ${?} == 0 ] && kubectl_check=$(ssh ${1} kubectl version -o yaml 2> /dev/null | grep -A 10 'clientVersion' | grep 'gitVersion' | awk '{ print $2 }') && status=1
  [ "${status}" == "1" ] && echo -e " [${GREEN}●${NC}] Package\t| kubectl ${kubectl_check} installed" || echo -e " [${YELLOW}●${NC}] Package\t| kubectl\t| not install"
}

function kubeadm-install-check()
{
  status=0
  ssh ${1} "which kubeadm" &> /dev/null
  [ ${?} == 0 ] && kubeadm_check=$(ssh ${1} kubeadm version -o yaml 2> /dev/null | grep "gitVersion" | awk '{ print $2 }') && status=1
  [ "${status}" == "1" ] && echo -e " [${GREEN}●${NC}] Package\t| kubeadm ${kubeadm_check} installed" || echo -e " [${YELLOW}●${NC}] Package\t| kubeadm\t| not install"
}

function kubelet-install-check()
{
  status=0
  ssh ${1} "which kubelet" &> /dev/null
  [ ${?} == 0 ] && kubelet_check=$(ssh ${1} kubelet --version 2> /dev/null | grep "^Kubernetes" | awk '{ print $2 }') && status=1
  [ "${status}" == "1" ] && echo -e " [${GREEN}●${NC}] Package\t| kubelet ${kubelet_check} installed" || echo -e " [${YELLOW}●${NC}] Package\t| kubelet\t| not install"
  ssh ${1} ls -l /etc/systemd/system/kubelet.service.d/ 2> /dev/null | grep -w "10-kubeadm.conf$" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Package\t| 10-kubeadm.conf checked" && status=0 || echo -e " [${RED}●${NC}] Package\t| 10-kubeadm.conf not configured correctly" && status=0
  [ ${status} == "1" ] && target=$(ls /etc/systemd/system/kubelet.service.d/ 2> /dev/null) && ssh ${1} sudo mv /etc/systemd/system/kubelet.service.d/${target} /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 2> /dev/null
}

function crio-install-check()
{
  ssh ${1} "which crio &> /dev/null" &> /dev/null
  [ ${?} == 0 ] && cri_check=$(ssh ${1} crio version 2> /dev/null | grep "^Version" | awk '{ print $2 }') && echo -e " [${GREEN}●${NC}] Package\t| crio ${cri_check} installed" || echo -e " [${YELLOW}●${NC}] Package\t| crio not install"
}

function podman-install-check()
{
  podman_check=$(ssh ${1} podman version 2> /dev/null | grep '^Version' | awk '{ print $2 }')
  ssh ${1} "which podman" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Package\t| podman ${podman_check} installed" || echo -e " [${YELLOW}●${NC}] Package\t| podman not install"
}

function skopeo-install-check()
{
  skopeo_check=$(ssh ${1} skopeo --version 2> /dev/null | awk '{ print $3 }')
  ssh ${1} "which skopeo" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Package\t| skopeo ${skopeo_check} installed" || echo -e " [${YELLOW}●${NC}] Package\t| skopeo not install"
}

function daemon-enable()
{
  ssh ${1} "sudo systemctl enable --now crio" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Daemon\t| crio enabled" || echo -e " [${RED}●${NC}] Daemon\t| crio not enable"
    ssh ${1} "sudo systemctl restart --now crio" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Daemon\t| crio restarted" || echo -e " [${RED}●${NC}] Daemon\t| crio not restart"

  ssh ${1} "sudo systemctl enable --now kubelet" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Daemon\t| kubelet enabled" || echo -e " [${RED}●${NC}] Daemon\t| kubelet not enable"
  ssh ${1} "sudo systemctl restart --now kubelet" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Daemon\t| kubelet restarted" || echo -e " [${RED}●${NC}] Daemon\t| kubelet not restart"

  ssh ${1} "sudo systemctl daemon-reload" &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Daemon\t| daemon has been reload" || echo -e " [${YELLOW}●${NC}] Daemon\t| daemon\t| not reload"
}

function daemon-reload()
{
  ssh ${1} sudo systemctl daemon-reload &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Daemon\t| daemon reload" || echo -e " [${RED}●${NC}] Daemon\t| daemon\t| not reload"
  ssh ${1} sudo systemctl restart cri-o &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Daemon\t| cri-o reload" || echo -e " [${RED}●${NC}] Daemon\t| cri-o not reload"
  ssh ${1} sudo systemctl restart kubelet &> /dev/null
  [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Daemon\t| kubelet reload" || echo -e " [${RED}●${NC}] Daemon\t| kubelet not reload"
}

function helm-repo-add()
{
  for clist in ${cp_nodes}
    do
      echo -e "${YELLOW}${clist} helm repositories${NC}"
      ssh ${clist} "helm repo add projectcalico https://projectcalico.docs.tigera.io/charts &> /dev/null" && echo -e "${YELLOW} > helm repository \"projectcalico\" added${NC}" || echo -e "${RED} > helm repository \"projectcalico\" not add${NC}"
      ssh ${clist} "helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server &> /dev/null" && echo -e "${YELLOW} > helm repository \"metrics-server\" added${NC}" || echo -e "${RED} > helm repository \"metrics-server\" not add${NC}"
      ssh ${clist} "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts &> /dev/null" && echo -e "${YELLOW} > helm repository \"prometheus\" added${NC}" || echo -e "${RED} > helm repository \"prometheus\" not add${NC}"
      ssh ${clist} "helm repo add kedacore https://kedacore.github.io/charts &> /dev/null" && echo -e "${YELLOW} > helm repository \"kedacore\" added${NC}" || echo -e "${RED} > helm repository \"kedacore\" not add${NC}"
      ssh ${clist} "helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx &> /dev/null" && echo -e "${YELLOW} > helm repository \"ingress-nginx\" added${NC}" || echo -e "${RED} > helm repository \"ingress-nginx\" not add${NC}"
      ssh ${clist} "helm repo add bitnami https://charts.bitnami.com/bitnami &> /dev/null" && echo -e "${YELLOW} > helm repository \"bitnami\" added${NC}" || echo -e "${RED} > helm repository \"bitnami\" not add${NC}"
      ssh ${clist} "helm repo add harbor https://helm.goharbor.io &> /dev/null" && echo -e "${YELLOW} > helm repository \"harbor\" added${NC}" || echo -e "${RED} > helm repository \"harbor\" not add${NC}"
    done
}

function helm-repo-check()
{
  node-selector local
  helm_repo_list=$(helm repo ls | tail -n +2 | awk '{ print $1 }' | tr -s '\n' ' ' | sed 's/.$//')
  for clist in ${cp_nodes}
    do
      echo -e "${YELLOW}${clist} helm repository list${NC}"
      for list in ${helm_repo_list}
        do
          echo -e "${YELLOW}${list}${NC}"
          echo ${list} | grep "prometheus" &> /dev/null
          [ $? == 0 ] && ssh ${clist} "helm search repo --versions ${list} | grep "kube" | head -n 4" || ssh ${clist} "helm search repo --versions ${list} | head -n 4"
          echo
        done
    done
}

function helm-repo-update()
{
  for clist in ${cp_nodes}
    do
      echo -e "${YELLOW}${clist} helm repositories update${NC}"
      ssh ${clist} "helm repo update &> /dev/null" && echo -e "${YELLOW}${install_list} > helm repositories updated${NC}\n"
    done
}

function dir-delete-list()
{
  [ "${wclist}" == "" ] && wclist="${wlist} ${clist}"

  ssh ${wclist} "ls ~/.kube" &> /dev/null
  [ ${?} == 0 ] && ssh ${wclist} "sudo rm -r ~/.kube" || echo -e " [${GREEN}●${NC}] Target has been removed: ~/.kube"
  ssh ${wclist} "sudo ls /etc/systemd/system/etcd*" &> /dev/null
  [ ${?} == 0 ] && ssh ${wclist} "sudo rm /etc/systemd/system/etcd*" &> /dev/null || echo -e " [${GREEN}●${NC}] Target has been removed: /etc/systemd/system/etcd*"
  empty=$(ssh ${wclist} "ls /var/log/pods/ 2> /dev/null | wc -l")
  [ ${empty} != 0 ] && ssh ${wclist} "sudo rm -r /var/log/pods/*" &> /dev/null || echo -e " [${GREEN}●${NC}] Target has been removed: /var/log/pods/*"
  empty=$(ssh ${wclist} "sudo ls /etc/kubernetes/manifests/ 2> /dev/null | wc -l")
  [ ${empty} != 0 ] && ssh ${wclist} "sudo rm /etc/kubernetes/manifests/*" &> /dev/null || echo -e " [${GREEN}●${NC}] Target has been removed: /etc/kubernetes/manifests/*"
  empty=$(ssh ${wclist} "sudo ls /etc/cni/net.d/ 2> /dev/null | wc -l")
  [ ${empty} != 0 ] && ssh ${wclist} "sudo rm /etc/cni/net.d/*" &> /dev/null || echo -e " [${GREEN}●${NC}] Target has been removed: /etc/cni/net.d/*"
  empty=$(ssh ${wclist} "ls /var/lib/calico/ 2> /dev/null | wc -l")
  [ ${empty} != 0 ] && ssh ${wclist} "sudo rm /var/lib/calico/*" &> /dev/null || echo -e " [${GREEN}●${NC}] Target has been removed: /var/lib/calico/*"
  empty=$(ssh ${wclist} "ls /var/log/containers/ 2> /dev/null | wc -l")
  [ ${empty} != 0 ] && ssh ${wclist} "sudo rm /var/log/containers/*" &> /dev/null || echo -e " [${GREEN}●${NC}] Target has been removed: /var/log/containers/*"
  empty=$(ssh ${wclist} "ls /var/log/calico/cni/ 2> /dev/null | wc -l")
  [ ${empty} != 0 ] && ssh ${wclist} "sudo rm /var/log/calico/cni/*" &> /dev/null || echo -e " [${GREEN}●${NC}] Target has been removed: /var/log/calico/cni/*"
  empty=$(ssh ${wclist} "sudo ls /opt/cni/bin/ 2> /dev/null | wc -l")
  [ ${empty} != 0 ] && ssh ${wclist} "sudo rm -r /opt/cni/bin/*" &> /dev/null || echo -e " [${GREEN}●${NC}] Target has been removed: /opt/cni/bin/*"
  empty=$(ssh ${wclist} "sudo ls /var/log/crio/pods 2> /dev/null | wc -l")
  [ ${empty} != 0 ] && ssh ${wclist} "sudo rm -r /var/log/crio/pods" &> /dev/null || echo -e " [${GREEN}●${NC}] Target has been removed: /var/log/crio/pods"
  ssh ${wclist} "sudo ls /var/lib/etcd > /dev/null 2>&1"
  [ ${?} == 0 ] && ssh ${wclist} "sudo rm -r /var/lib/etcd" &> /dev/null || echo -e " [${GREEN}●${NC}] Target has been removed: /var/lib/etcd/"
}

function check-cidr()
{
  kubectl get node > /dev/null 2>&1
  [ ${?} != 0 ] && echo -e " [${RED}●${NC}] This node not join cluster" && exit
  echo -e "${YELLOW}POD-CIDR: ${RED}`kubectl cluster-info dump -o yaml | grep -m 1 cluster-cidr | cut -d '=' -f 2`${NC}"
  echo -e "${YELLOW}SVC-CIDR: ${RED}`kubectl cluster-info dump -o yaml | grep -m 1 service-cluster | cut -d '=' -f 2`${NC}" 
}

function check-tains()
{
  kubectl get node > /dev/null 2>&1
  [ ${?} != 0 ] && echo -e " [${RED}●${NC}] This node not join cluster" && exit
  for kube_node in $(kubectl get nodes | awk '{ print $1 }' | tail -n +2);
    do
      role=$(kubectl describe node $kube_node | grep 'Roles:' | awk '{ print $2 }')
      echo -en "${YELLOW}${kube_node}: ${RED}${role}"
      echo ${role} | grep "control-plane" &> /dev/null
      [ ${?} == 0 ] && echo -e "${NC}\t|" $(kubectl describe node ${kube_node} | grep 'Taints:')
      echo ${role} | grep "worker" &> /dev/null
      [ ${?} == 0 ] && echo -e "${NC}\t\t|" $(kubectl describe node ${kube_node} | grep 'Taints:')
    done
}

function check-etcd-member()
{
  kubectl get node > /dev/null 2>&1
  [ ${?} != 0 ] && echo -e " [${RED}●${NC}] This node not join cluster" && exit
  etcd_pod=$(kubectl get pods -n kube-system | grep 'etcd' | awk '{ print $1 }' | head -n 1)
  etcd_endpoints=$(echo ${etcd_pod} | cut -d '-' -f 2)
  kubectl exec -it ${etcd_pod} -n kube-system -- etcdctl --endpoints ${NETID}.${etcd_endpoints}:2379 --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key --cacert=/etc/kubernetes/pki/etcd/ca.crt member list
}

function node-check()
{
  [ -z ${2} ] && echo -e "Please input parameter ${YELLOW}[ hosts | hosts name | hosts port | NETID start end <Port> ]${NC}\n" && exit
  #hosts check
  if [ "${2}" == "hosts" ]
    then
      [ -z ${3} ] && port=22
      [ "${3}" == "name" ] && port=22 || port=${3}
      #[ -z ${3} ] && echo -e "${RED}Please input port number. [ node-check hosts <Port> ]${NC}\n" && exit

      node_install_list=$(cat /etc/hosts | grep -v '#' | grep -E '\-m|\-w|kube-vip' | grep "${NETID}" | awk '{ print $1 }')
      echo -e "${YELLOW}Node-checker running...${NC}"
      for install_list in ${node_install_list}
        do
          [ -z ${3} ] && port=22
          nc -w 2 -z ${install_list} ${port} &> /dev/null
          port_status=$(echo ${?})
          if [ "${3}" == "name" ]
            then
              [ -z ${3} ] && port=22
              [ "${port_status}" == "0" ] && ssh -o ConnectTimeout=1 -o BatchMode=yes ${install_list} 'hostname' 2>&1 | grep '@' &> /dev/null
              [ ${?} == 0 ] && hostname="NO SSH-KEY" || hostname=$(ssh -o ConnectTimeout=1 -o BatchMode=yes ${install_list} 'hostname' 2> /dev/null)
              [ "${hostname}" != "NO SSH-KEY" ] && ssh -o ConnectTimeout=1 -o BatchMode=yes ${install_list} 'hostname' 2>&1 | grep 'fingerprint' &> /dev/null
              [ ${?} == 0 ] && hostname="WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!"
              [ "${port_status}" == "0" ] && echo -e " [${GREEN}●${NC}] ${install_list} | ${YELLOW}${port}${NC} Port Pass\t| Hostname: ${hostname}" || echo -e " [${RED}●${NC}] ${install_list} | ${YELLOW}${port}${NC} Port Not Pass\t| Hostname: --"
            else
              [ -z ${3} ] && port=22
              [ "${port_status}" == "0" ] && echo -e " [${GREEN}●${NC}] ${install_list} | ${YELLOW}${port}${NC} Port Pass" || echo -e " [${RED}●${NC}] ${install_list} | ${YELLOW}${port}${NC} Port Not Pass"
          fi
        done
    #Check non-join nodes
    elif [ "${2}" == "non-join" ]
      then
        nc -z -w 1 `hostname` 10250 > /dev/null 2>&1
        [ ${?} == 0 ] && cluster_list=$(kubectl get nodes | tail -n +2 | awk '{ print $1 }' | tr -s '\n' '|' | sed '$ s/.$//') || echo -e "${RED}This node is not active!${NC}\n" && exit
        echo -e "${YELLOW}non join node list${NC}"
        [ "${cluster_list}" != "" ] && echo -e " > All nodes are joined" || echo -e "`cat /etc/hosts | grep -vE "#|ip6|${CORE_DNS_DOMAIN}" | grep "${NETID}" | awk '{ print $2 }' | grep -vE ${cluster_list} | tr -s '\n' ' '`\n"
    else
      #[ "${2}" != "${NETID}" ] && echo -e "${RED}Please input port number. [ hosts <Port> or NETID start end <Port> ]${NC}\n" && exit
      declare -i start=${3} end=${4} port=${5}; net=${2}; install_list=0
      echo -e "${YELLOW}Node-checker running...${NC}"
      for ((start;start<=end; start=start+1))
        do
          install_list=$(echo "${net}.${start}")
          nc -w 1 -z ${install_list} ${port} &> /dev/null
          port_status=$(echo ${?})
          if [ "${6}" == "name" ]
            then
              [ "${port_status}" == "0" ] && ssh -o ConnectTimeout=1 -o BatchMode=yes ${install_list} 'hostname' 2>&1 | grep '@' &> /dev/null
              [ ${?} == 0 ] && hostname="NO SSH-KEY" || hostname=$(ssh -o ConnectTimeout=1 -o BatchMode=yes ${install_list} 'hostname' 2> /dev/null)
              [ "${hostname}" != "NO SSH-KEY" ] && ssh -o ConnectTimeout=1 -o BatchMode=yes ${install_list} 'hostname' 2>&1 | grep 'fingerprint' &> /dev/null
              [ ${?} == 0 ] && hostname="WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!"
              [ "${port_status}" == "0" ] && echo -e " [${GREEN}●${NC}] ${install_list} | ${YELLOW}${port}${NC} Port Pass\t| Hostname: ${hostname}" || echo -e " [${RED}●${NC}] ${install_list} | ${YELLOW}${port}${NC} Port Not Pass\t| Hostname: --"
            else
              [ "${port_status}" == "0" ] && echo -e " [${GREEN}●${NC}] ${install_list} | ${YELLOW}${port}${NC} Port Pass" || echo -e " [${RED}●${NC}] ${install_list} | ${YELLOW}${port}${NC} Port Not Pass"
          fi
        done
  fi
}

function rook-wipe-data()
{
  node-selector ${@}
  interrupt ${RED}Please confirm this command will override disk on ${YELLOW} ${cp_nodes} ${wk_nodes}${NC}
  echo -e "${YELLOW}Rook data wipe procedure${NC}"
  
  for wlist in ${wk_nodes}
    do
      disk_list=$(ssh ${wlist} sudo fdisk -l | grep '^Disk' | grep 'sd' | awk '{ print $2 }' | sed 's/://g;s/\/dev\///g' | tr -s '\n' ' ' | sed 's/.$//' | sed 's/sd/\/dev\/sd/g')
      for ceph_list in ${disk_list}
        do
          taget=""
          ssh ${wlist} sudo wipefs ${ceph_list} | grep 'ceph_bluestore' &> /dev/null
          [ ${?} == 0 ] && taget="/dev/"$(ssh ${wlist} sudo wipefs ${ceph_list} | grep 'ceph_bluestore' | awk '{ print $1 }') && break || continue
        done
      echo -e "${YELLOW}${wlist} data wipe procedure${NC}"
      ssh ${wlist} sudo wipefs -a ${taget} &> /dev/null
      [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] ${taget} signature has been wiped" || echo -e " [${RED}●${NC}] ${taget} signature not found"
      #Zap the disk to a fresh, usable state [zap-all is important, b/c MBR has to be clean]
      ssh ${wlist} sudo sgdisk --zap-all ${taget} &> /dev/null
      [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] ${taget} GPT data structures destroyed!" || echo -e " [${RED}●${NC}] ${taget} GPT data structures not changed!"
      #Wipe a large portion of the beginning of the disk to remove more LVM metadata that may be present
      ssh ${wlist} sudo dd if=/dev/zero of="${taget}" bs=1M count=100 oflag=direct,dsync &> /dev/null
      [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] ${taget} has been overwrite by /dev/zero" || echo -e " [${RED}●${NC}] ${taget} not overwrite!"
      #SSDs may be better cleaned with blkdiscard instead of dd
      ssh ${wlist} sudo blkdiscard ${taget} &> /dev/null
      #Inform the OS of partition table changes
      ssh ${wlist} sudo partprobe ${taget} &> /dev/null
      ssh ${wlist} sudo rm -r /var/lib/rook/ &> /dev/null
      [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] Data directory has been cleanup" || echo -e " [${RED}●${NC}] Data directory not found"
    done

  for clist in ${cp_nodes};
    do
      echo -e "${YELLOW}${clist} data wipe procedure${NC}"
      ssh ${clist} sudo rm -r /var/lib/rook/ &> /dev/null
      [ ${?} == 0 ] && echo -e " [${GREEN}●${NC}] ${clist} Directory has been cleanup" || echo -e " [${RED}●${NC}] ${clist} Data directory not found"
    done
  echo
}